import _isEmpty from "lodash/isEmpty";
import React from "react";
import { VictoryLabel, VictoryContainer, VictoryTheme, LineSegment, addEvents, Arc, Axis } from "victory-core";
import { getScale, getStyles, getBaseProps } from "./helper-methods";
const fallbackProps = {
  width: 450,
  height: 300,
  padding: 50
};

// eslint-disable-next-line @typescript-eslint/no-empty-interface

class VictoryPolarAxisBase extends React.Component {
  static animationWhitelist = ["style", "domain", "range", "tickCount", "tickValues", "padding", "width", "height"];
  static displayName = "VictoryAxis";
  static role = "axis";
  static defaultTransitions = {
    onExit: {
      duration: 500
    },
    onEnter: {
      duration: 500
    }
  };
  static defaultProps = {
    axisComponent: /*#__PURE__*/React.createElement(LineSegment, null),
    axisLabelComponent: /*#__PURE__*/React.createElement(VictoryLabel, null),
    circularAxisComponent: /*#__PURE__*/React.createElement(Arc, null),
    circularGridComponent: /*#__PURE__*/React.createElement(Arc, null),
    containerComponent: /*#__PURE__*/React.createElement(VictoryContainer, null),
    endAngle: 360,
    gridComponent: /*#__PURE__*/React.createElement(LineSegment, null),
    groupComponent: /*#__PURE__*/React.createElement("g", {
      role: "presentation"
    }),
    labelPlacement: "parallel",
    startAngle: 0,
    standalone: true,
    theme: VictoryTheme.grayscale,
    tickComponent: /*#__PURE__*/React.createElement(LineSegment, null),
    tickLabelComponent: /*#__PURE__*/React.createElement(VictoryLabel, null)
  };
  static getDomain = Axis.getDomain;
  static getAxis = Axis.getAxis;
  static getScale(props) {
    return getScale(props);
  }
  static getStyles(props) {
    return getStyles(props, fallbackProps.style);
  }
  static getBaseProps(props) {
    return getBaseProps(props, fallbackProps);
  }
  static expectedComponents = ["axisComponent", "circularAxisComponent", "groupComponent", "containerComponent", "tickComponent", "tickLabelComponent", "gridComponent", "circularGridComponent"];
  renderAxisLine(props) {
    const {
      dependentAxis
    } = props;
    const axisComponent = dependentAxis ? props.axisComponent : props.circularAxisComponent;
    const axisProps = this.getComponentProps(axisComponent, "axis", 0);
    return /*#__PURE__*/React.cloneElement(axisComponent, axisProps);
  }
  renderLabel(props) {
    const {
      axisLabelComponent,
      dependentAxis,
      label
    } = props;
    if (!label || !dependentAxis) {
      return null;
    }
    const axisLabelProps = this.getComponentProps(axisLabelComponent, "axisLabel", 0);
    return /*#__PURE__*/React.cloneElement(axisLabelComponent, axisLabelProps);
  }
  renderAxis(props) {
    const {
      tickComponent,
      tickLabelComponent,
      name
    } = props;
    const shouldRender = componentProps => {
      const {
        style = {},
        events = {}
      } = componentProps;
      const visible = style.stroke !== "transparent" && style.stroke !== "none" && style.strokeWidth !== 0;
      return visible || !_isEmpty(events);
    };
    const axisType = props.dependentAxis ? "radial" : "angular";
    const gridComponent = axisType === "radial" ? props.circularGridComponent : props.gridComponent;
    const tickComponents = this.dataKeys.map((key, index) => {
      const tickProps = Object.assign({
        key: `${name}-tick-${key}`
      }, this.getComponentProps(tickComponent, "ticks", index));
      const TickComponent = /*#__PURE__*/React.cloneElement(tickComponent, tickProps);
      return shouldRender(TickComponent.props) ? TickComponent : undefined;
    }).filter(Boolean);
    const gridComponents = this.dataKeys.map((key, index) => {
      const gridProps = Object.assign({
        key: `${name}-grid-${key}`
      }, this.getComponentProps(gridComponent, "grid", index));
      const GridComponent = /*#__PURE__*/React.cloneElement(gridComponent, gridProps);
      return shouldRender(GridComponent.props) ? GridComponent : undefined;
    }).filter(Boolean);
    const tickLabelComponents = this.dataKeys.map((key, index) => {
      const tickLabelProps = Object.assign({
        key: `${name}-tick-${key}`
      }, this.getComponentProps(tickLabelComponent, "tickLabels", index));
      return /*#__PURE__*/React.cloneElement(tickLabelComponent, tickLabelProps);
    });
    const axis = this.renderAxisLine(props);
    const axisLabel = this.renderLabel(props);
    const children = [axis, axisLabel, ...tickComponents, ...gridComponents, ...tickLabelComponents];
    return this.renderGroup(props, children);
  }

  // Overridden in victory-native
  renderGroup(props, children) {
    const {
      groupComponent
    } = props;
    return /*#__PURE__*/React.cloneElement(groupComponent, {}, children);
  }
  shouldAnimate() {
    return !!this.props.animate;
  }
  render() {
    const {
      animationWhitelist
    } = VictoryPolarAxis;
    const props = Axis.modifyProps(this.props, fallbackProps);
    if (this.shouldAnimate()) {
      return this.animateComponent(props, animationWhitelist);
    }
    const children = this.renderAxis(props);
    return props.standalone ? this.renderContainer(props.containerComponent, children) : children;
  }
}
const options = {
  components: [{
    name: "axis",
    index: 0
  }, {
    name: "axisLabel",
    index: 0
  }, {
    name: "grid"
  }, {
    name: "parent",
    index: "parent"
  }, {
    name: "ticks"
  }, {
    name: "tickLabels"
  }]
};
export const VictoryPolarAxis = addEvents(VictoryPolarAxisBase, options);