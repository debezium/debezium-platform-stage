import * as React from 'react';
import { observer } from 'mobx-react';
import { css } from '@patternfly/react-styles';
import styles from '../../../css/topology-components';
import CollapseIcon from '@patternfly/react-icons/dist/esm/icons/compress-alt-icon';
import NodeLabel from '../../../components/nodes/labels/NodeLabel';
import { Layer } from '../../../components/layers';
import { GROUPS_LAYER, TOP_LAYER } from '../../../const';
import { useCombineRefs, useHover, useSize } from '../../../utils';
import { AnchorEnd, isGraph, LabelPosition, ScaleDetailsLevel } from '../../../types';
import { useAnchor, useDragNode } from '../../../behavior';
import { TOP_TO_BOTTOM } from '../../../layouts';
import TaskGroupSourceAnchor from '../anchors/TaskGroupSourceAnchor';
import TaskGroupTargetAnchor from '../anchors/TaskGroupTargetAnchor';
const DefaultTaskGroupExpanded = observer(({ className, element, collapsible, selected, onSelect, hover, label, secondaryLabel, showLabel = true, showLabelOnHover, hideDetailsAtMedium, status, GroupLabelComponent = NodeLabel, truncateLength, canDrop, dropTarget, onContextMenu, contextMenuOpen, dragging, dragNodeRef, badge, badgeColor, badgeTextColor, badgeBorderColor, badgeClassName, badgeLocation, labelOffset = 17, centerLabelOnEdge, labelIconClass, labelIcon, labelIconPadding, onCollapseChange, labelPosition, borderRadius = 16 }) => {
    var _a, _b, _c, _d;
    const [hovered, hoverRef] = useHover(200, 500);
    const [labelHover, labelHoverRef] = useHover(0);
    const dragLabelRef = useDragNode()[1];
    const refs = useCombineRefs(hoverRef, dragNodeRef);
    const isHover = hover !== undefined ? hover : hovered || labelHover;
    const [labelSize, labelRef] = useSize([centerLabelOnEdge]);
    const verticalLayout = ((_c = (_b = (_a = element.getGraph()).getLayoutOptions) === null || _b === void 0 ? void 0 : _b.call(_a)) === null || _c === void 0 ? void 0 : _c.rankdir) === TOP_TO_BOTTOM;
    const groupLabelPosition = (_d = labelPosition !== null && labelPosition !== void 0 ? labelPosition : element.getLabelPosition()) !== null && _d !== void 0 ? _d : LabelPosition.bottom;
    let parent = element.getParent();
    const detailsLevel = element.getGraph().getDetailsLevel();
    let altGroup = false;
    while (!isGraph(parent)) {
        altGroup = !altGroup;
        parent = parent.getParent();
    }
    const labelShown = showLabel &&
        (!hideDetailsAtMedium || detailsLevel === ScaleDetailsLevel.high || (isHover && showLabelOnHover)) &&
        (label || element.getLabel());
    const anchorOffset = verticalLayout ? (labelSize === null || labelSize === void 0 ? void 0 : labelSize.height) / 2 : (labelSize === null || labelSize === void 0 ? void 0 : labelSize.width) / 2;
    useAnchor(React.useCallback((node) => new TaskGroupSourceAnchor(node, verticalLayout, labelShown &&
        ((centerLabelOnEdge && labelPosition === LabelPosition.bottom && verticalLayout) ||
            (labelPosition === LabelPosition.right && !verticalLayout)) &&
        labelSize
        ? anchorOffset
        : 0), [labelShown, anchorOffset, centerLabelOnEdge, labelPosition, labelSize, verticalLayout]), AnchorEnd.source);
    useAnchor(React.useCallback((node) => new TaskGroupTargetAnchor(node, verticalLayout, labelShown &&
        ((centerLabelOnEdge && labelPosition === LabelPosition.top && verticalLayout) ||
            (labelPosition === LabelPosition.left && !verticalLayout)) &&
        labelSize
        ? anchorOffset
        : 0), [labelShown, anchorOffset, centerLabelOnEdge, labelPosition, labelSize, verticalLayout]), AnchorEnd.target);
    const bounds = element.getBounds();
    const [labelX, labelY] = React.useMemo(() => {
        if (!showLabel || !(label || element.getLabel())) {
            return [0, 0];
        }
        switch (groupLabelPosition) {
            case LabelPosition.top:
                return [bounds.x + bounds.width / 2, -bounds.y + (centerLabelOnEdge ? 0 : labelOffset)];
            case LabelPosition.right:
                return [bounds.x + bounds.width + (centerLabelOnEdge ? 0 : labelOffset), bounds.y + bounds.height / 2];
            case LabelPosition.left:
                return [centerLabelOnEdge ? bounds.x : labelOffset, bounds.y + bounds.height / 2];
            case LabelPosition.bottom:
            default:
                return [bounds.x + bounds.width / 2, bounds.y + bounds.height + (centerLabelOnEdge ? 0 : labelOffset)];
        }
    }, [
        showLabel,
        label,
        element,
        groupLabelPosition,
        bounds.x,
        bounds.width,
        bounds.y,
        bounds.height,
        centerLabelOnEdge,
        labelOffset
    ]);
    const children = element.getNodes().filter((c) => c.isVisible());
    if (children.length === 0) {
        return null;
    }
    const groupClassName = css(styles.topologyGroup, className, altGroup && 'pf-m-alt-group', canDrop && 'pf-m-highlight', dragging && 'pf-m-dragging', selected && 'pf-m-selected');
    const innerGroupClassName = css(styles.topologyGroup, className, altGroup && 'pf-m-alt-group', canDrop && 'pf-m-highlight', dragging && 'pf-m-dragging', selected && 'pf-m-selected', isHover && 'pf-m-hover', canDrop && dropTarget && 'pf-m-drop-target');
    const scale = element.getGraph().getScale();
    const medScale = element.getGraph().getDetailsLevelThresholds().medium;
    const labelScale = detailsLevel !== ScaleDetailsLevel.high ? Math.min(1 / scale, 1 / medScale) : 1;
    const labelPositionScale = detailsLevel !== ScaleDetailsLevel.high ? 1 / labelScale : 1;
    const groupLabel = labelShown ? (React.createElement("g", { ref: labelHoverRef, transform: isHover ? `scale(${labelScale})` : undefined },
        React.createElement(GroupLabelComponent, { element: element, boxRef: labelRef, className: styles.topologyGroupLabel, x: labelX * labelPositionScale, y: labelY * labelPositionScale, position: labelPosition, centerLabelOnEdge: centerLabelOnEdge, runStatus: status, paddingX: 8, paddingY: 5, dragRef: dragNodeRef ? dragLabelRef : undefined, status: element.getNodeStatus(), selected: selected, secondaryLabel: secondaryLabel, truncateLength: truncateLength, badge: badge, badgeColor: badgeColor, badgeTextColor: badgeTextColor, badgeBorderColor: badgeBorderColor, badgeClassName: badgeClassName, badgeLocation: badgeLocation, labelIconClass: labelIconClass, labelIcon: labelIcon, labelIconPadding: labelIconPadding, onContextMenu: onContextMenu, contextMenuOpen: contextMenuOpen, hover: isHover || labelHover, actionIcon: collapsible ? React.createElement(CollapseIcon, null) : undefined, onActionIconClick: () => onCollapseChange(element, true) }, label || element.getLabel()))) : null;
    return (React.createElement("g", { onContextMenu: onContextMenu, onClick: onSelect, className: groupClassName },
        React.createElement(Layer, { id: GROUPS_LAYER },
            React.createElement("g", { ref: refs, onContextMenu: onContextMenu, onClick: onSelect, className: innerGroupClassName },
                React.createElement("rect", { x: bounds.x, y: bounds.y, width: bounds.width, height: bounds.height, className: styles.topologyGroupBackground, rx: borderRadius, ry: borderRadius })),
            groupLabel && isHover ? (React.createElement(Layer, { id: TOP_LAYER },
                React.createElement("g", { className: innerGroupClassName }, groupLabel))) : (groupLabel))));
});
export default DefaultTaskGroupExpanded;
//# sourceMappingURL=DefaultTaskGroupExpanded.js.map