import { Node, Anchor, NodeModel, ModelKind, AnchorEnd, NodeShape, Edge, GraphElement, NodeStatus, LabelPosition } from '../types';
import Rect from '../geom/Rect';
import { Translatable } from '../geom/types';
import BaseElement from './BaseElement';
import Dimensions from '../geom/Dimensions';
import Point from '../geom/Point';
export default class BaseNode<E extends NodeModel = NodeModel, D = any> extends BaseElement<E, D> implements Node<E, D> {
    private anchors;
    private dimensions;
    private dimensionsInitialized;
    private positioned;
    private uncollapsedCenter;
    private position;
    private get nodes();
    private group;
    private collapsed;
    private labelPosition;
    private shape;
    private status;
    constructor();
    private get groupBounds();
    private get sourceEdges();
    private get targetEdges();
    getChildren(): GraphElement[];
    getAllNodeChildren(leafOnly?: boolean): Node[];
    getPositionableChildren(): Node[];
    protected getAllChildren(): GraphElement[];
    getKind(): ModelKind;
    private getInternalBounds;
    getBounds(): Rect;
    setBounds(bounds: Rect): void;
    getPosition(): Point;
    updateChildrenPositions(point: Point, prevLocation: Point): void;
    setPosition(point: Point): void;
    isPositioned(): boolean;
    getDimensions(): Dimensions;
    setDimensions(dimensions: Dimensions): void;
    private setGroupDimensionInitializedByChildren;
    isDimensionsInitialized(): boolean;
    getAnchor(end?: AnchorEnd, type?: string): Anchor;
    setAnchor(anchor: Anchor, end?: AnchorEnd, type?: string): void;
    getNodes(): Node[];
    isGroup(): boolean;
    setGroup(group: boolean): void;
    isCollapsed(): boolean;
    setCollapsed(collapsed: boolean): void;
    getLabelPosition(): LabelPosition;
    setLabelPosition(position: LabelPosition): void;
    getNodeShape(): NodeShape;
    setNodeShape(shape: NodeShape): void;
    getNodeStatus(): NodeStatus;
    setNodeStatus(status: NodeStatus): void;
    getSourceEdges(): Edge[];
    getTargetEdges(): Edge[];
    isVisible(): boolean;
    setModel(model: E): void;
    toModel(): NodeModel;
    translateToParent(t: Translatable): void;
    translateFromParent(t: Translatable): void;
}
//# sourceMappingURL=BaseNode.d.ts.map