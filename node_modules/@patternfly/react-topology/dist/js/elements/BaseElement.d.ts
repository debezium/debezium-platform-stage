import { ElementModel, Graph, GraphElement, Controller, ModelKind } from '../types';
import Stateful from '../utils/Stateful';
import { Translatable } from '../geom/types';
export default abstract class BaseElement<E extends ElementModel = ElementModel, D = any> extends Stateful implements GraphElement<E, D> {
    private id;
    private type;
    private data?;
    private parent?;
    private visible;
    private children;
    private controller?;
    private label?;
    private style;
    abstract getKind(): ModelKind;
    constructor();
    private get ordering();
    getLabel(): string;
    setLabel(label: string): void;
    getOrderKey(): number[];
    hasController(): boolean;
    getController(): Controller;
    setController(controller: Controller): void;
    getGraph(): Graph;
    getParent(): GraphElement;
    setParent(parent: GraphElement): void;
    hasParent(): boolean;
    getId(): string;
    setId(id: string): void;
    getType(): string;
    setType(type: string): void;
    setVisible(visible: boolean): void;
    isVisible(): boolean;
    getData(): D | undefined;
    setData(data: D | undefined): void;
    getStyle<T extends {}>(): T;
    getChildren(): GraphElement[];
    insertChild(child: GraphElement, index: number): void;
    appendChild(child: GraphElement): void;
    removeChild(child: GraphElement): void;
    remove(): void;
    setModel(model: E): void;
    toModel(): ElementModel;
    raise(): void;
    translateToAbsolute(t: Translatable): void;
    translateFromAbsolute(t: Translatable): void;
    translateToParent(t: Translatable): void;
    translateFromParent(t: Translatable): void;
    destroy(): void;
}
//# sourceMappingURL=BaseElement.d.ts.map