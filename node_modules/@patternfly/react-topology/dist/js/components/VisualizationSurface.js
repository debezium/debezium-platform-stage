"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const React = tslib_1.__importStar(require("react"));
const mobx_1 = require("mobx");
// https://github.com/mobxjs/mobx-react#observer-batching
require("mobx-react/batchingForReactDom");
const mobx_react_1 = require("mobx-react");
const react_measure_1 = tslib_1.__importDefault(require("react-measure"));
const react_styles_1 = require("@patternfly/react-styles");
const topology_components_1 = tslib_1.__importDefault(require("../css/topology-components"));
const SVGDefsProvider_1 = tslib_1.__importDefault(require("./defs/SVGDefsProvider"));
const ElementWrapper_1 = tslib_1.__importDefault(require("./ElementWrapper"));
const Dimensions_1 = tslib_1.__importDefault(require("../geom/Dimensions"));
const useVisualizationController_1 = tslib_1.__importDefault(require("../hooks/useVisualizationController"));
const stopEvent = (e) => {
    e.preventDefault();
    e.stopPropagation();
};
const VisualizationSurface = ({ state }) => {
    const controller = (0, useVisualizationController_1.default)();
    const timerId = React.useRef();
    const debounceMeasure = React.useCallback((func, delay) => {
        return (contentRect) => {
            if (!timerId.current) {
                func(contentRect);
            }
            clearTimeout(timerId.current);
            timerId.current = setTimeout(() => func(contentRect), delay);
        };
    }, []);
    React.useEffect(() => {
        state && controller.setState(state);
    }, [controller, state]);
    const onMeasure = React.useMemo(() => debounceMeasure((0, mobx_1.action)((contentRect) => {
        controller.getGraph().setDimensions(new Dimensions_1.default(contentRect.client.width, contentRect.client.height));
    }), 100), [controller, debounceMeasure]);
    // dispose of onMeasure
    React.useEffect(() => () => clearTimeout(timerId.current), [onMeasure]);
    if (!controller.hasGraph()) {
        return null;
    }
    const graph = controller.getGraph();
    return (React.createElement(react_measure_1.default, { client: true, onResize: onMeasure }, ({ measureRef }) => (
    // render an outer div because react-measure doesn't seem to fire events properly on svg resize
    React.createElement("div", { "data-test-id": "topology", className: (0, react_styles_1.css)(topology_components_1.default.topologyVisualizationSurface), ref: measureRef },
        React.createElement("svg", { className: (0, react_styles_1.css)(topology_components_1.default.topologyVisualizationSurfaceSvg), onContextMenu: stopEvent },
            React.createElement(SVGDefsProvider_1.default, null,
                React.createElement(ElementWrapper_1.default, { element: graph })))))));
};
exports.default = (0, mobx_react_1.observer)(VisualizationSurface);
//# sourceMappingURL=VisualizationSurface.js.map