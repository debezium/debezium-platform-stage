import { Edge, Graph, Layout, Node } from '../types';
import { BaseLayout } from './BaseLayout';
import { LayoutLink } from './LayoutLink';
import { LayoutNode } from './LayoutNode';
import { DagreNode } from './DagreNode';
import { DagreLink } from './DagreLink';
import { DagreLayoutOptions } from './DagreLayout';
import { LayoutGroup } from './LayoutGroup';
export declare class DagreGroupsLayout extends BaseLayout implements Layout {
    protected dagreOptions: DagreLayoutOptions;
    constructor(graph: Graph, options?: Partial<DagreLayoutOptions>);
    protected createLayoutNode(node: Node, nodeDistance: number, index: number): DagreNode;
    protected createLayoutLink(edge: Edge, source: LayoutNode, target: LayoutNode, isFalse?: boolean): LayoutLink;
    protected updateEdgeBendpoints(edges: DagreLink[]): void;
    protected getFauxEdges(): LayoutLink[];
    protected getAllLeaves(group: LayoutGroup): LayoutNode[];
    protected getAllSubGroups(group: LayoutGroup): LayoutGroup[];
    protected isNodeInGroups(node: LayoutNode, groups: LayoutGroup[]): boolean;
    protected getEdgeLayoutNode(nodes: LayoutNode[], groups: LayoutGroup[], node: Node | null): LayoutNode | undefined;
    protected getLinks(edges: Edge[]): LayoutLink[];
    protected startLayout(graph: Graph, initialRun: boolean, addingNodes: boolean): void;
}
//# sourceMappingURL=DagreGroupsLayout.d.ts.map