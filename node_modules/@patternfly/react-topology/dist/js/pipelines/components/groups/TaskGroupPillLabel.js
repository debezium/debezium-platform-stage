"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const React = tslib_1.__importStar(require("react"));
const mobx_react_1 = require("mobx-react");
const topology_components_1 = tslib_1.__importDefault(require("../../../css/topology-components"));
const TaskPill_1 = tslib_1.__importDefault(require("../nodes/TaskPill"));
const useCombineRefs_1 = tslib_1.__importDefault(require("../../../utils/useCombineRefs"));
const utils_1 = require("../../../utils");
const types_1 = require("../../../types");
const TaskGroupPillLabel = (_a) => {
    var { element, labelOffset = 17, badge, badgeColor, badgeTextColor, badgeBorderColor, badgeClassName, runStatus, truncateLength, boxRef, position, centerLabelOnEdge, onContextMenu, contextMenuOpen, actionIcon, onActionIconClick } = _a, rest = tslib_1.__rest(_a, ["element", "labelOffset", "badge", "badgeColor", "badgeTextColor", "badgeBorderColor", "badgeClassName", "runStatus", "truncateLength", "boxRef", "position", "centerLabelOnEdge", "onContextMenu", "contextMenuOpen", "actionIcon", "onActionIconClick"]);
    const [labelSize, labelRef] = (0, utils_1.useSize)([]);
    const pillRef = (0, useCombineRefs_1.default)(boxRef, labelRef);
    const labelWidth = (labelSize === null || labelSize === void 0 ? void 0 : labelSize.width) || 0;
    const labelHeight = (labelSize === null || labelSize === void 0 ? void 0 : labelSize.height) || 0;
    const bounds = element.getBounds();
    const detailsLevel = element.getGraph().getDetailsLevel();
    const scale = element.getGraph().getScale();
    const medScale = element.getGraph().getDetailsLevelThresholds().medium;
    const labelScale = detailsLevel !== types_1.ScaleDetailsLevel.high ? Math.min(1 / scale, 1 / medScale) : 1;
    const labelPositionScale = detailsLevel !== types_1.ScaleDetailsLevel.high ? 1 / labelScale : 1;
    const { startX, startY } = React.useMemo(() => {
        let startX;
        let startY;
        const scaledWidth = labelWidth / labelPositionScale;
        const scaledHeight = labelHeight / labelPositionScale;
        if (position === types_1.LabelPosition.top) {
            startX = bounds.x + bounds.width / 2 - scaledWidth / 2;
            startY = bounds.y - (centerLabelOnEdge ? scaledHeight / 2 : labelOffset);
        }
        else if (position === types_1.LabelPosition.right) {
            startX = bounds.x + bounds.width + (centerLabelOnEdge ? -scaledWidth / 2 : labelOffset);
            startY = bounds.y + bounds.height / 2;
        }
        else if (position === types_1.LabelPosition.left) {
            startX = bounds.x - (centerLabelOnEdge ? scaledWidth / 2 : scaledWidth + labelOffset);
            startY = bounds.y + bounds.height / 2;
        }
        else {
            startX = bounds.x + bounds.width / 2 - scaledWidth / 2;
            startY = bounds.y + bounds.height + (centerLabelOnEdge ? -scaledHeight / 2 : labelOffset);
        }
        return { startX, startY };
    }, [
        labelPositionScale,
        position,
        bounds.width,
        bounds.x,
        bounds.y,
        bounds.height,
        centerLabelOnEdge,
        labelHeight,
        labelOffset,
        labelWidth
    ]);
    return (React.createElement(TaskPill_1.default, Object.assign({}, rest, { element: element, width: labelWidth, pillRef: pillRef, actionIcon: actionIcon, onActionIconClick: onActionIconClick, className: topology_components_1.default.topologyNodeLabel, status: runStatus, x: startX * labelPositionScale, y: startY * labelPositionScale, paddingX: 8, paddingY: 5, scaleNode: false, truncateLength: truncateLength, badge: badge, badgeColor: badgeColor, badgeTextColor: badgeTextColor, badgeBorderColor: badgeBorderColor, badgeClassName: badgeClassName, onContextMenu: onContextMenu, contextMenuOpen: contextMenuOpen })));
};
exports.default = (0, mobx_react_1.observer)(TaskGroupPillLabel);
//# sourceMappingURL=TaskGroupPillLabel.js.map