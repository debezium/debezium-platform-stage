import { __rest } from "tslib";
import * as React from 'react';
import { Label } from '../../../components/Label';
import { getOUIAProps, getDefaultOUIAId } from '../../../helpers';
class Chip extends React.Component {
    constructor(props) {
        super(props);
    }
    render() {
        const _a = this.props, { isOverflowChip, children, badge, onClick, className, textMaxWidth, isReadOnly, closeBtnAriaLabel, tooltipPosition, ouiaId, 
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        component } = _a, props = __rest(_a, ["isOverflowChip", "children", "badge", "onClick", "className", "textMaxWidth", "isReadOnly", "closeBtnAriaLabel", "tooltipPosition", "ouiaId", "component"]);
        return (React.createElement(Label, Object.assign({ variant: "outline", className: className, textMaxWidth: textMaxWidth, tooltipPosition: tooltipPosition }, (!isReadOnly &&
            !isOverflowChip && {
            onClose: onClick,
            closeBtnAriaLabel: closeBtnAriaLabel ? closeBtnAriaLabel : `Close ${children}`
        }), (isOverflowChip && { onClick, variant: 'overflow' }), getOUIAProps(isOverflowChip ? 'OverflowChip' : Chip.displayName, ouiaId !== undefined ? ouiaId : getDefaultOUIAId(Chip.displayName)), props),
            children,
            badge && React.createElement(React.Fragment, null,
                " ",
                badge)));
    }
}
Chip.displayName = 'Chip';
Chip.defaultProps = {
    className: '',
    isOverflowChip: false,
    isReadOnly: false,
    tooltipPosition: 'top',
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    onClick: (_e) => undefined,
    textMaxWidth: '16ch'
};
export { Chip };
//# sourceMappingURL=Chip.js.map