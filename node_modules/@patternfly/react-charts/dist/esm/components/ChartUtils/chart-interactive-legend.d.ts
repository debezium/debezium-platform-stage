interface ChartInteractiveLegendInterface {
    chartNames: [string | string[]];
    isDataHidden?: (data: any) => boolean;
    isHidden?: (index: number) => boolean;
    legendName: string;
    onLegendClick?: (props: any) => void;
}
/**
 * Returns events for an interactive legend
 *
 * @param props See ChartInteractiveLegendInterface
 * @public
 */
export declare const getInteractiveLegendEvents: (props: ChartInteractiveLegendInterface) => {
    childName: string;
    target: "data" | "labels" | "parent";
    eventKey: number;
    eventHandlers: {
        onClick: () => {
            target: string;
            mutation: (props: any) => any;
        }[];
        onMouseOver: () => ({
            childName: any;
            target: string;
            eventKey: string;
            mutation: (props: any) => any;
        } | {
            childName: string;
            target: string;
            eventKey: any;
            mutation: (props: any) => {
                style: any;
            };
        })[];
        onMouseOut: () => {
            childName: string;
            target: string;
            eventKey: any;
            mutation: () => any;
        }[];
    };
}[];
/**
 * Returns styles for interactive legend items
 * @private
 */
export declare const getInteractiveLegendItemStyles: (hidden?: boolean) => {
    labels?: undefined;
    symbol?: undefined;
} | {
    labels: {
        fill: "var(--pf-v6-chart-global--label--Fill, #1f1f1f)";
    };
    symbol: {
        fill: "var(--pf-v6-chart-global--label--Fill, #1f1f1f)";
        type: string;
    };
};
export {};
//# sourceMappingURL=chart-interactive-legend.d.ts.map