import { PaddingProps } from 'victory-core';
import { ChartLegendProps } from '../ChartLegend/ChartLegend';
import { ChartThemeDefinition } from '../ChartTheme/ChartTheme';
import * as React from 'react';
interface ChartLegendInterface {
    allowWrap?: boolean;
    chartType?: string;
    colorScale?: any;
    dx?: number;
    dy?: number;
    height: number;
    legendComponent: React.ReactElement<any>;
    orientation?: 'horizontal' | 'vertical';
    padding: PaddingProps;
    patternScale?: string[];
    position: 'bottom' | 'bottom-left' | 'right';
    theme: ChartThemeDefinition;
    themeColor?: string;
    width: number;
}
interface ChartLegendDimensionsInterface {
    legendData: any[];
    legendOrientation: 'horizontal' | 'vertical';
    legendProps: ChartLegendProps;
    theme: ChartThemeDefinition;
}
/**
 * Returns the max text length in a legend data set to calculate the x offset for right aligned legends.
 * @private
 */
export declare const getLegendMaxTextWidth: (legendData: any[], theme: ChartThemeDefinition) => number;
/**
 * Returns a legend which has been positioned per the given chart properties
 * @private
 */
export declare const getComputedLegend: ({ allowWrap, chartType, colorScale, dx, dy, height, legendComponent, padding, patternScale, position, theme, themeColor, width, orientation }: ChartLegendInterface) => React.ReactElement<any, string | React.JSXElementConstructor<any>>;
/**
 * Returns legend dimensions
 * @private
 */
export declare const getLegendDimensions: ({ legendData, legendOrientation, legendProps, theme }: ChartLegendDimensionsInterface) => any;
/**
 * Returns the extra height required to accommodate wrapped legend items
 * @private
 */
export declare const getLegendItemsExtraHeight: ({ legendData, legendOrientation, legendProps, theme }: ChartLegendDimensionsInterface) => number;
export {};
//# sourceMappingURL=chart-legend.d.ts.map