"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ColorComponentTheme = exports.ColorTheme = void 0;
const tslib_1 = require("tslib");
const chart_donut_threshold_second_Color_1 = tslib_1.__importDefault(require('@patternfly/react-tokens/dist/js/chart_donut_threshold_second_Color'));
const chart_donut_threshold_third_Color_1 = tslib_1.__importDefault(require('@patternfly/react-tokens/dist/js/chart_donut_threshold_third_Color'));
const chart_donut_threshold_first_Color_1 = tslib_1.__importDefault(require('@patternfly/react-tokens/dist/js/chart_donut_threshold_first_Color'));
const chart_axis_grid_stroke_Color_1 = tslib_1.__importDefault(require('@patternfly/react-tokens/dist/js/chart_axis_grid_stroke_Color'));
const chart_axis_tick_stroke_Color_1 = tslib_1.__importDefault(require('@patternfly/react-tokens/dist/js/chart_axis_tick_stroke_Color'));
const chart_bullet_comparative_measure_error_Fill_Color_1 = tslib_1.__importDefault(require('@patternfly/react-tokens/dist/js/chart_bullet_comparative_measure_error_Fill_Color'));
const chart_bullet_comparative_measure_error_stroke_Color_1 = tslib_1.__importDefault(require('@patternfly/react-tokens/dist/js/chart_bullet_comparative_measure_error_stroke_Color'));
const chart_bullet_Height_1 = tslib_1.__importDefault(require('@patternfly/react-tokens/dist/js/chart_bullet_Height'));
const chart_bullet_comparative_measure_Fill_Color_1 = tslib_1.__importDefault(require('@patternfly/react-tokens/dist/js/chart_bullet_comparative_measure_Fill_Color'));
const chart_bullet_comparative_measure_stroke_Color_1 = tslib_1.__importDefault(require('@patternfly/react-tokens/dist/js/chart_bullet_comparative_measure_stroke_Color'));
const chart_bullet_comparative_measure_warning_Fill_Color_1 = tslib_1.__importDefault(require('@patternfly/react-tokens/dist/js/chart_bullet_comparative_measure_warning_Fill_Color'));
const chart_bullet_comparative_measure_warning_stroke_Color_1 = tslib_1.__importDefault(require('@patternfly/react-tokens/dist/js/chart_bullet_comparative_measure_warning_stroke_Color'));
const chart_bullet_group_title_divider_Fill_Color_1 = tslib_1.__importDefault(require('@patternfly/react-tokens/dist/js/chart_bullet_group_title_divider_Fill_Color'));
const chart_bullet_group_title_divider_stroke_Color_1 = tslib_1.__importDefault(require('@patternfly/react-tokens/dist/js/chart_bullet_group_title_divider_stroke_Color'));
const chart_bullet_negative_measure_ColorScale_100_1 = tslib_1.__importDefault(require('@patternfly/react-tokens/dist/js/chart_bullet_negative_measure_ColorScale_100'));
const chart_bullet_negative_measure_ColorScale_200_1 = tslib_1.__importDefault(require('@patternfly/react-tokens/dist/js/chart_bullet_negative_measure_ColorScale_200'));
const chart_bullet_negative_measure_ColorScale_300_1 = tslib_1.__importDefault(require('@patternfly/react-tokens/dist/js/chart_bullet_negative_measure_ColorScale_300'));
const chart_bullet_negative_measure_ColorScale_400_1 = tslib_1.__importDefault(require('@patternfly/react-tokens/dist/js/chart_bullet_negative_measure_ColorScale_400'));
const chart_bullet_negative_measure_ColorScale_500_1 = tslib_1.__importDefault(require('@patternfly/react-tokens/dist/js/chart_bullet_negative_measure_ColorScale_500'));
const chart_bullet_qualitative_range_ColorScale_100_1 = tslib_1.__importDefault(require('@patternfly/react-tokens/dist/js/chart_bullet_qualitative_range_ColorScale_100'));
const chart_bullet_qualitative_range_ColorScale_200_1 = tslib_1.__importDefault(require('@patternfly/react-tokens/dist/js/chart_bullet_qualitative_range_ColorScale_200'));
const chart_bullet_qualitative_range_ColorScale_300_1 = tslib_1.__importDefault(require('@patternfly/react-tokens/dist/js/chart_bullet_qualitative_range_ColorScale_300'));
const chart_bullet_qualitative_range_ColorScale_400_1 = tslib_1.__importDefault(require('@patternfly/react-tokens/dist/js/chart_bullet_qualitative_range_ColorScale_400'));
const chart_bullet_qualitative_range_ColorScale_500_1 = tslib_1.__importDefault(require('@patternfly/react-tokens/dist/js/chart_bullet_qualitative_range_ColorScale_500'));
/**
 * Victory color theme
 * @private
 */
const ColorTheme = (props) => {
    const { COLOR_SCALE } = props;
    return {
        area: {
            colorScale: COLOR_SCALE,
            style: {
                data: {
                    fill: COLOR_SCALE[0]
                }
            }
        },
        axis: {
            colorScale: COLOR_SCALE
        },
        bar: {
            colorScale: COLOR_SCALE,
            style: {
                data: {
                    fill: COLOR_SCALE[0]
                }
            }
        },
        boxplot: {
            colorScale: COLOR_SCALE,
            style: {
                q1: {
                    fill: COLOR_SCALE[0]
                },
                q3: {
                    fill: COLOR_SCALE[0]
                }
            }
        },
        candlestick: {
            colorScale: COLOR_SCALE
        },
        chart: {
            colorScale: COLOR_SCALE
        },
        errorbar: {
            colorScale: COLOR_SCALE
        },
        group: {
            colorScale: COLOR_SCALE
        },
        legend: {
            colorScale: COLOR_SCALE
        },
        line: {
            colorScale: COLOR_SCALE,
            style: {
                data: {
                    stroke: COLOR_SCALE[0]
                }
            }
        },
        pie: {
            colorScale: COLOR_SCALE
        },
        scatter: {
            colorScale: COLOR_SCALE
        },
        stack: {
            colorScale: COLOR_SCALE
        },
        voronoi: {
            colorScale: COLOR_SCALE
        }
    };
};
exports.ColorTheme = ColorTheme;
/**
 * Component color theme
 * @private
 * @beta
 */
const ColorComponentTheme = (props) => {
    const { COLOR_SCALE } = props;
    return {
        axis: {
            axis: {
                style: {
                    grid: {
                        stroke: chart_axis_grid_stroke_Color_1.default.var
                    },
                    ticks: {
                        stroke: chart_axis_tick_stroke_Color_1.default.var
                    }
                }
            }
        },
        bullet: {
        // TBD...
        },
        bulletComparativeErrorMeasure: {
            bar: {
                style: {
                    data: {
                        fill: chart_bullet_comparative_measure_error_Fill_Color_1.default.var,
                        stroke: chart_bullet_comparative_measure_error_stroke_Color_1.default.var
                    }
                }
            }
        },
        bulletComparativeMeasure: {
            bar: {
                height: chart_bullet_Height_1.default.value,
                style: {
                    data: {
                        fill: chart_bullet_comparative_measure_Fill_Color_1.default.var,
                        stroke: chart_bullet_comparative_measure_stroke_Color_1.default.var
                    }
                }
            }
        },
        bulletComparativeWarningMeasure: {
            bar: {
                height: chart_bullet_Height_1.default.value,
                style: {
                    data: {
                        fill: chart_bullet_comparative_measure_warning_Fill_Color_1.default.var,
                        stroke: chart_bullet_comparative_measure_warning_stroke_Color_1.default.var
                    }
                }
            }
        },
        bulletGroupTitle: {
            line: {
                style: {
                    data: {
                        fill: chart_bullet_group_title_divider_Fill_Color_1.default.var,
                        stroke: chart_bullet_group_title_divider_stroke_Color_1.default.var
                    }
                }
            }
        },
        bulletPrimaryDotMeasure: {
        // TBD...
        },
        bulletPrimarySegmentedMeasure: {
        // TBD...
        },
        bulletQualitativeRange: {
            group: {
                colorScale: [
                    chart_bullet_qualitative_range_ColorScale_100_1.default.var,
                    chart_bullet_qualitative_range_ColorScale_200_1.default.var,
                    chart_bullet_qualitative_range_ColorScale_300_1.default.var,
                    chart_bullet_qualitative_range_ColorScale_400_1.default.var,
                    chart_bullet_qualitative_range_ColorScale_500_1.default.var
                ]
            }
        },
        bulletPrimaryNegativeMeasure: {
            group: {
                colorScale: [
                    chart_bullet_negative_measure_ColorScale_100_1.default.var,
                    chart_bullet_negative_measure_ColorScale_200_1.default.var,
                    chart_bullet_negative_measure_ColorScale_300_1.default.var,
                    chart_bullet_negative_measure_ColorScale_400_1.default.var,
                    chart_bullet_negative_measure_ColorScale_500_1.default.var
                ]
            }
        },
        donut: {
        // TBD...
        },
        donutThresholdDynamic: {
            legend: {
                // Merge just the first color of dynamic (blue, green, etc.) with static (grey) for expected colorScale
                colorScale: [COLOR_SCALE[0], chart_donut_threshold_second_Color_1.default.var, chart_donut_threshold_third_Color_1.default.var]
            },
            // Merge the threshold colors in case users want to show the unused data
            pie: {
                colorScale: [
                    COLOR_SCALE[0],
                    chart_donut_threshold_first_Color_1.default.var,
                    chart_donut_threshold_second_Color_1.default.var,
                    chart_donut_threshold_third_Color_1.default.var
                ]
            }
        },
        donutThresholdStatic: {
            pie: {
                colorScale: [
                    chart_donut_threshold_first_Color_1.default.var,
                    chart_donut_threshold_second_Color_1.default.var,
                    chart_donut_threshold_third_Color_1.default.var
                ]
            }
        },
        donutUtilization: {
            legend: {
                colorScale: [
                    COLOR_SCALE[0],
                    chart_donut_threshold_first_Color_1.default.var,
                    chart_donut_threshold_second_Color_1.default.var,
                    chart_donut_threshold_third_Color_1.default.var
                ]
            },
            pie: {
                colorScale: [COLOR_SCALE[0], chart_donut_threshold_first_Color_1.default.var]
            }
        },
        label: {
        // TBD...
        },
        threshold: {
        // TBD...
        }
    };
};
exports.ColorComponentTheme = ColorComponentTheme;
//# sourceMappingURL=color-theme.js.map