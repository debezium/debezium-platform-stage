"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChartBulletQualitativeRange = void 0;
const tslib_1 = require("tslib");
const React = tslib_1.__importStar(require("react"));
const hoist_non_react_statics_1 = tslib_1.__importDefault(require("hoist-non-react-statics"));
const victory_bar_1 = require("victory-bar");
const chart_bullet_data_1 = require("./utils/chart-bullet-data");
const ChartBar_1 = require("../ChartBar/ChartBar");
const ChartContainer_1 = require("../ChartContainer/ChartContainer");
const ChartStyles_1 = require("../ChartTheme/ChartStyles");
const ChartTooltip_1 = require("../ChartTooltip/ChartTooltip");
const chart_theme_types_1 = require("../ChartUtils/chart-theme-types");
const ChartBulletQualitativeRange = ({ allowTooltip = true, ariaDesc, ariaTitle, barWidth = ChartStyles_1.ChartBulletStyles.qualitativeRangeWidth, constrainToVisibleArea = false, data, domain, horizontal = true, invert = false, labels, measureComponent = React.createElement(ChartBar_1.ChartBar, null), padding, standalone = true, themeColor, y, y0, 
// destructure last
theme = (0, chart_theme_types_1.getBulletQualitativeRangeTheme)(themeColor), height = theme.group.height, width = theme.group.width, labelComponent = React.createElement(ChartTooltip_1.ChartTooltip, null) }) => {
    const computedData = (0, chart_bullet_data_1.getQualitativeRangeData)({
        data,
        invert,
        theme,
        y,
        y0
    });
    // Label component
    //
    // The x and y calculations below ensure that the tooltip appears above the bar, instead of vertically centered.
    // Having the tooltip vertically centered is visually confusing with comparative measures.
    //
    // Note: SVG height and width are provided by ChartBullet as a workaround to support constrainToVisibleArea
    const tooltip = React.cloneElement(labelComponent, Object.assign({ constrainToVisibleArea, dx: () => {
            if (horizontal) {
                return 0;
            }
            const result = typeof barWidth === 'function' ? barWidth(data) : barWidth;
            return result / 2;
        }, dy: () => {
            if (!horizontal) {
                return 0;
            }
            const result = typeof barWidth === 'function' ? barWidth(data) : barWidth;
            return -(result / 2);
        }, orientation: 'top' }, labelComponent.props));
    const measure = computedData.map((dataPoint, index) => React.cloneElement(measureComponent, Object.assign({ barWidth, data: [Object.assign({}, dataPoint)], domain,
        height,
        horizontal, key: `pf-chart-bullet-qualitative-range-${index}`, labelComponent: allowTooltip ? tooltip : undefined, labels,
        padding, standalone: false, style: {
            data: {
                fill: dataPoint._color
            }
        }, theme,
        themeColor,
        width }, measureComponent.props)));
    return standalone ? (React.createElement(ChartContainer_1.ChartContainer, { desc: ariaDesc, height: height, title: ariaTitle, width: width }, measure)) : (React.createElement(React.Fragment, null, measure));
};
exports.ChartBulletQualitativeRange = ChartBulletQualitativeRange;
exports.ChartBulletQualitativeRange.displayName = 'ChartBulletQualitativeRange';
// Note: VictoryBar.role must be hoisted
(0, hoist_non_react_statics_1.default)(exports.ChartBulletQualitativeRange, victory_bar_1.VictoryBar);
//# sourceMappingURL=ChartBulletQualitativeRange.js.map