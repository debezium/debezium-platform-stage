"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getThresholdTheme = exports.getDonutUtilizationTheme = exports.getDonutThresholdStaticTheme = exports.getDonutThresholdDynamicTheme = exports.getDonutTheme = exports.getChartTheme = exports.getBulletQualitativeRangeTheme = exports.getBulletPrimarySegmentedMeasureTheme = exports.getBulletPrimaryNegativeMeasureTheme = exports.getBulletPrimaryDotMeasureTheme = exports.getBulletGroupTitleTheme = exports.getBulletComparativeWarningMeasureTheme = exports.getBulletComparativeMeasureTheme = exports.getBulletComparativeErrorMeasureTheme = exports.getBulletTheme = exports.getAxisTheme = void 0;
const tslib_1 = require("tslib");
const chart_theme_1 = require("./chart-theme");
const merge_1 = tslib_1.__importDefault(require("lodash/merge"));
/**
 * Returns axis theme
 * @private
 */
const getAxisTheme = (themeColor) => {
    const baseTheme = (0, chart_theme_1.getTheme)(themeColor);
    const componentTheme = (0, chart_theme_1.getComponentTheme)(themeColor);
    return (0, merge_1.default)(baseTheme, componentTheme.axis);
};
exports.getAxisTheme = getAxisTheme;
/**
 * Returns bullet chart theme
 * @private
 */
const getBulletTheme = (themeColor) => {
    const baseTheme = (0, chart_theme_1.getTheme)(themeColor);
    const componentTheme = (0, chart_theme_1.getComponentTheme)(themeColor);
    return (0, merge_1.default)(baseTheme, componentTheme.bullet);
};
exports.getBulletTheme = getBulletTheme;
/**
 * Returns comparative error measure theme for bullet chart
 * @private
 */
const getBulletComparativeErrorMeasureTheme = (themeColor) => {
    const baseTheme = (0, chart_theme_1.getTheme)(themeColor);
    const componentTheme = (0, chart_theme_1.getComponentTheme)(themeColor);
    return (0, merge_1.default)(baseTheme, componentTheme.bulletComparativeErrorMeasure);
};
exports.getBulletComparativeErrorMeasureTheme = getBulletComparativeErrorMeasureTheme;
/**
 * Returns comparative measure theme for bullet chart
 * @private
 */
const getBulletComparativeMeasureTheme = (themeColor) => {
    const baseTheme = (0, chart_theme_1.getTheme)(themeColor);
    const componentTheme = (0, chart_theme_1.getComponentTheme)(themeColor);
    return (0, merge_1.default)(baseTheme, componentTheme.bulletComparativeMeasure);
};
exports.getBulletComparativeMeasureTheme = getBulletComparativeMeasureTheme;
/**
 * Returns comparative warning measure theme for bullet chart
 * @private
 */
const getBulletComparativeWarningMeasureTheme = (themeColor) => {
    const baseTheme = (0, chart_theme_1.getTheme)(themeColor);
    const componentTheme = (0, chart_theme_1.getComponentTheme)(themeColor);
    return (0, merge_1.default)(baseTheme, componentTheme.bulletComparativeWarningMeasure);
};
exports.getBulletComparativeWarningMeasureTheme = getBulletComparativeWarningMeasureTheme;
/**
 * Returns group title theme for bullet chart
 * @private
 */
const getBulletGroupTitleTheme = (themeColor) => {
    const baseTheme = (0, chart_theme_1.getTheme)(themeColor);
    const componentTheme = (0, chart_theme_1.getComponentTheme)(themeColor);
    return (0, merge_1.default)(baseTheme, componentTheme.bulletGroupTitle);
};
exports.getBulletGroupTitleTheme = getBulletGroupTitleTheme;
/**
 * Returns primary dot measure theme for bullet chart
 * @private
 */
const getBulletPrimaryDotMeasureTheme = (themeColor) => {
    const baseTheme = (0, chart_theme_1.getTheme)(themeColor);
    const componentTheme = (0, chart_theme_1.getComponentTheme)(themeColor);
    return (0, merge_1.default)(baseTheme, componentTheme.bulletPrimaryDotMeasure);
};
exports.getBulletPrimaryDotMeasureTheme = getBulletPrimaryDotMeasureTheme;
/**
 * Returns primary negative measure theme for bullet chart
 * @private
 */
const getBulletPrimaryNegativeMeasureTheme = (themeColor) => {
    const baseTheme = (0, chart_theme_1.getTheme)(themeColor);
    const componentTheme = (0, chart_theme_1.getComponentTheme)(themeColor);
    return (0, merge_1.default)(baseTheme, componentTheme.bulletPrimaryNegativeMeasure);
};
exports.getBulletPrimaryNegativeMeasureTheme = getBulletPrimaryNegativeMeasureTheme;
/**
 * Returns primary segmented measure theme for bullet chart
 * @private
 */
const getBulletPrimarySegmentedMeasureTheme = (themeColor) => {
    const baseTheme = (0, chart_theme_1.getTheme)(themeColor);
    const componentTheme = (0, chart_theme_1.getComponentTheme)(themeColor);
    return (0, merge_1.default)(baseTheme, componentTheme.bulletPrimarySegmentedMeasure);
};
exports.getBulletPrimarySegmentedMeasureTheme = getBulletPrimarySegmentedMeasureTheme;
/**
 * Returns qualitative range theme for bullet chart
 * @private
 */
const getBulletQualitativeRangeTheme = (themeColor) => {
    const baseTheme = (0, chart_theme_1.getTheme)(themeColor);
    const componentTheme = (0, chart_theme_1.getComponentTheme)(themeColor);
    return (0, merge_1.default)(baseTheme, componentTheme.bulletQualitativeRange);
};
exports.getBulletQualitativeRangeTheme = getBulletQualitativeRangeTheme;
/**
 * Returns theme for Chart component
 * @private
 */
const getChartTheme = (themeColor, showAxis) => {
    const theme = (0, chart_theme_1.getTheme)(themeColor);
    if (!showAxis) {
        theme.axis.padding = 0;
        theme.axis.style.axis.fill = 'transparent';
        theme.axis.style.axis.stroke = 'transparent';
        theme.axis.style.grid.fill = 'transparent';
        theme.axis.style.grid.stroke = 'transparent';
        theme.axis.style.ticks.fill = 'transparent';
        theme.axis.style.ticks.stroke = 'transparent';
        theme.axis.style.tickLabels.fill = 'transparent';
    }
    return theme;
};
exports.getChartTheme = getChartTheme;
/**
 * Returns donut theme
 * @private
 */
const getDonutTheme = (themeColor) => {
    const baseTheme = (0, chart_theme_1.getTheme)(themeColor);
    const componentTheme = (0, chart_theme_1.getComponentTheme)(themeColor);
    return (0, merge_1.default)(baseTheme, componentTheme.donut);
};
exports.getDonutTheme = getDonutTheme;
/**
 * Returns dynamic donut threshold theme
 * @private
 */
const getDonutThresholdDynamicTheme = (themeColor) => {
    const baseTheme = (0, chart_theme_1.getTheme)(themeColor);
    const componentTheme = (0, chart_theme_1.getComponentTheme)(themeColor);
    return (0, merge_1.default)(baseTheme, componentTheme.donutThresholdDynamic);
};
exports.getDonutThresholdDynamicTheme = getDonutThresholdDynamicTheme;
/**
 * Returns static donut threshold theme
 * @private
 */
const getDonutThresholdStaticTheme = (themeColor, invert) => {
    const baseTheme = (0, chart_theme_1.getTheme)(themeColor);
    const componentTheme = (0, chart_theme_1.getComponentTheme)(themeColor);
    const theme = (0, merge_1.default)(baseTheme, componentTheme.donutThresholdStatic);
    if (invert && baseTheme.pie.colorScale instanceof Array) {
        const colorScale = [...componentTheme.donutThresholdStatic.pie.colorScale];
        theme.pie.colorScale = (0, merge_1.default)(baseTheme.pie.colorScale, colorScale.reverse());
    }
    return theme;
};
exports.getDonutThresholdStaticTheme = getDonutThresholdStaticTheme;
/**
 * Returns donut utilization theme
 * @private
 */
const getDonutUtilizationTheme = (themeColor) => {
    const baseTheme = (0, chart_theme_1.getTheme)(themeColor);
    const componentTheme = (0, chart_theme_1.getComponentTheme)(themeColor);
    return (0, merge_1.default)(baseTheme, componentTheme.donutUtilization);
};
exports.getDonutUtilizationTheme = getDonutUtilizationTheme;
/**
 * Returns threshold theme
 * @private
 */
const getThresholdTheme = (themeColor) => {
    const baseTheme = (0, chart_theme_1.getTheme)(themeColor);
    const componentTheme = (0, chart_theme_1.getComponentTheme)(themeColor);
    return (0, merge_1.default)(baseTheme, componentTheme.threshold);
};
exports.getThresholdTheme = getThresholdTheme;
//# sourceMappingURL=chart-theme-types.js.map