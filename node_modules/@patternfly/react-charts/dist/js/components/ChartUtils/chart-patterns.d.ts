import * as React from 'react';
interface PatternPropsInterface {
    children?: any;
    colorScale?: any;
    hasPatterns?: boolean | boolean[];
    isPatternDefs?: boolean;
    offset?: number;
    patternId?: string;
    patternScale?: string[];
    patternUnshiftIndex?: number;
    themeColor?: string;
    themeColorScale?: string[];
}
/**
 * Helper function to return pattern defs
 * @private
 */
export declare const getPatternDefs: ({ colorScale, offset, patternId, patternUnshiftIndex }: PatternPropsInterface) => React.JSX.Element;
/**
 * Merge pattern IDs with `data.fill` property, used by interactive pie chart legend
 * @private
 */
export declare const mergePatternData: (data: any, patternScale: string[]) => any;
/**
 * Helper function to return default pattern props
 * @private
 */
export declare const useDefaultPatternProps: ({ colorScale, hasPatterns, patternScale, themeColorScale }: PatternPropsInterface) => {
    defaultColorScale: string[];
    defaultPatternScale: string[];
    isPatternDefs: boolean;
    patternId: string;
};
/**
 * Helper function to render children with patterns
 * @private
 */
export declare const renderChildrenWithPatterns: ({ children, patternScale, themeColor }: PatternPropsInterface) => (string | number | React.ReactElement<any, string | React.JSXElementConstructor<any>> | Iterable<React.ReactNode>)[];
export {};
//# sourceMappingURL=chart-patterns.d.ts.map