"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChartAxis = void 0;
const tslib_1 = require("tslib");
const React = tslib_1.__importStar(require("react"));
const hoist_non_react_statics_1 = tslib_1.__importDefault(require("hoist-non-react-statics"));
const victory_axis_1 = require("victory-axis");
const ChartContainer_1 = require("../ChartContainer/ChartContainer");
const ChartLabel_1 = require("../ChartLabel/ChartLabel");
const chart_theme_1 = require("../ChartUtils/chart-theme");
const chart_theme_types_1 = require("../ChartUtils/chart-theme-types");
const ChartAxis = (_a) => {
    var { axisLabelComponent = React.createElement(ChartLabel_1.ChartLabel, null), containerComponent = React.createElement(ChartContainer_1.ChartContainer, null), name, showGrid = false, themeColor, tickLabelComponent = React.createElement(ChartLabel_1.ChartLabel, null), 
    // destructure last
    theme = (0, chart_theme_1.getTheme)(themeColor) } = _a, rest = tslib_1.__rest(_a, ["axisLabelComponent", "containerComponent", "name", "showGrid", "themeColor", "tickLabelComponent", "theme"]);
    const componentTheme = (0, chart_theme_1.getComponentTheme)(themeColor);
    // Clone so users can override container props
    const container = React.cloneElement(containerComponent, Object.assign({ theme }, containerComponent.props));
    const getAxisLabelComponent = () => React.cloneElement(axisLabelComponent, Object.assign(Object.assign(Object.assign({}, (name && {
        id: () => `${name}-${axisLabelComponent.type.displayName}`
    })), axisLabelComponent.props), ((componentTheme === null || componentTheme === void 0 ? void 0 : componentTheme.label) && componentTheme.label) // override backgroundStyle
    ));
    const getTickLabelComponent = () => React.cloneElement(tickLabelComponent, Object.assign(Object.assign(Object.assign({}, (name && {
        id: (props) => `${name}-${tickLabelComponent.type.displayName}-${props.index}`
    })), tickLabelComponent.props), ((componentTheme === null || componentTheme === void 0 ? void 0 : componentTheme.label) && componentTheme.label) // override backgroundStyle
    ));
    // Note: containerComponent is required for theme
    return (React.createElement(victory_axis_1.VictoryAxis, Object.assign({ axisLabelComponent: getAxisLabelComponent(), containerComponent: container, name: name, theme: showGrid ? (0, chart_theme_types_1.getAxisTheme)(themeColor) : theme, tickLabelComponent: getTickLabelComponent() }, rest)));
};
exports.ChartAxis = ChartAxis;
exports.ChartAxis.displayName = 'ChartAxis';
(0, hoist_non_react_statics_1.default)(exports.ChartAxis, victory_axis_1.VictoryAxis);
//# sourceMappingURL=ChartAxis.js.map