"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VictoryBrushContainer = void 0;
exports.brushContainerMixin = brushContainerMixin;
var _defaults2 = _interopRequireDefault(require("lodash/defaults"));
var _react = _interopRequireDefault(require("react"));
var _victoryCore = require("victory-core");
var _brushHelpers = require("./brush-helpers");
var _reactFastCompare = _interopRequireDefault(require("react-fast-compare"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function brushContainerMixin(Base) {
  // @ts-expect-error "TS2545: A mixin class must have a constructor with a single rest parameter of type 'any[]'."
  return class VictoryBrushContainer extends Base {
    static displayName = "VictoryBrushContainer";
    static defaultProps = {
      ..._victoryCore.VictoryContainer.defaultProps,
      allowDrag: true,
      allowDraw: true,
      allowResize: true,
      brushComponent: /*#__PURE__*/_react.default.createElement(_victoryCore.Rect, null),
      brushStyle: {
        stroke: "transparent",
        fill: "black",
        fillOpacity: 0.1
      },
      handleComponent: /*#__PURE__*/_react.default.createElement(_victoryCore.Rect, null),
      handleStyle: {
        stroke: "transparent",
        fill: "transparent"
      },
      handleWidth: 8,
      mouseMoveThreshold: 0
    };
    static defaultEvents(props) {
      return [{
        target: "parent",
        eventHandlers: {
          onMouseDown: (evt, targetProps) => {
            return props.disable ? {} : _brushHelpers.BrushHelpers.onMouseDown(evt, targetProps);
          },
          onTouchStart: (evt, targetProps) => {
            return props.disable ? {} : _brushHelpers.BrushHelpers.onMouseDown(evt, targetProps);
          },
          onGlobalMouseMove: (evt, targetProps) => {
            return props.disable || !targetProps.isPanning && !targetProps.isSelecting ? {} : _brushHelpers.BrushHelpers.onGlobalMouseMove(evt, targetProps);
          },
          onGlobalTouchMove: (evt, targetProps) => {
            return props.disable || !targetProps.isPanning && !targetProps.isSelecting ? {} : _brushHelpers.BrushHelpers.onGlobalMouseMove(evt, targetProps);
          },
          onGlobalMouseUp: (evt, targetProps) => {
            return props.disable ? {} : _brushHelpers.BrushHelpers.onGlobalMouseUp(evt, targetProps);
          },
          onGlobalTouchEnd: (evt, targetProps) => {
            return props.disable ? {} : _brushHelpers.BrushHelpers.onGlobalMouseUp(evt, targetProps);
          },
          onGlobalTouchCancel: (evt, targetProps) => {
            return props.disable ? {} : _brushHelpers.BrushHelpers.onGlobalMouseUp(evt, targetProps);
          }
        }
      }];
    }
    getSelectBox(props, coordinates) {
      const {
        x,
        y
      } = coordinates;
      const {
        brushStyle,
        brushComponent,
        name
      } = props;
      const brushComponentStyle = brushComponent.props && brushComponent.props.style;
      const cursor = !props.allowDrag && !props.allowResize ? "auto" : "move";
      return x[0] !== x[1] && y[0] !== y[1] ? /*#__PURE__*/_react.default.cloneElement(brushComponent, {
        key: `${name}-brush`,
        width: Math.abs(x[1] - x[0]) || 1,
        height: Math.abs(y[1] - y[0]) || 1,
        x: Math.min(x[0], x[1]),
        y: Math.min(y[0], y[1]),
        cursor,
        style: (0, _defaults2.default)({}, brushComponentStyle, brushStyle)
      }) : null;
    }
    getCursorPointers(props) {
      const cursors = {
        yProps: "ns-resize",
        xProps: "ew-resize"
      };
      if (!props.allowResize && props.allowDrag) {
        cursors.xProps = "move";
        cursors.yProps = "move";
      } else if (!props.allowResize && !props.allowDrag) {
        cursors.xProps = "auto";
        cursors.yProps = "auto";
      }
      return cursors;
    }
    getHandles(props, domain) {
      const {
        handleWidth,
        handleStyle,
        handleComponent,
        name
      } = props;
      const domainBox = _brushHelpers.BrushHelpers.getDomainBox(props, domain);
      const {
        x1,
        x2,
        y1,
        y2
      } = domainBox;
      const {
        top,
        bottom,
        left,
        right
      } = _brushHelpers.BrushHelpers.getHandles(props, domainBox);
      const width = Math.abs(x2 - x1) || 1;
      const height = Math.abs(y2 - y1) || 1;
      const handleComponentStyle = handleComponent.props && handleComponent.props.style || {};
      const style = (0, _defaults2.default)({}, handleComponentStyle, handleStyle);
      const cursors = this.getCursorPointers(props);
      const yProps = {
        style,
        width,
        height: handleWidth,
        cursor: cursors.yProps
      };
      const xProps = {
        style,
        width: handleWidth,
        height,
        cursor: cursors.xProps
      };
      const handleProps = {
        top: top && Object.assign({
          x: top.x1,
          y: top.y1
        }, yProps),
        bottom: bottom && Object.assign({
          x: bottom.x1,
          y: bottom.y1
        }, yProps),
        left: left && Object.assign({
          y: left.y1,
          x: left.x1
        }, xProps),
        right: right && Object.assign({
          y: right.y1,
          x: right.x1
        }, xProps)
      };
      const handles = ["top", "bottom", "left", "right"].reduce((memo, curr) => handleProps[curr] ? memo.concat( /*#__PURE__*/_react.default.cloneElement(handleComponent, Object.assign({
        key: `${name}-handle-${curr}`
      }, handleProps[curr]))) : memo, []);
      return handles.length ? handles : null;
    }
    getRect(props) {
      const {
        currentDomain,
        cachedBrushDomain
      } = props;
      const brushDomain = (0, _defaults2.default)({}, props.brushDomain, props.domain);
      const domain = (0, _reactFastCompare.default)(brushDomain, cachedBrushDomain) ? (0, _defaults2.default)({}, currentDomain, brushDomain) : brushDomain;
      const coordinates = _victoryCore.Selection.getDomainCoordinates(props, domain);
      const selectBox = this.getSelectBox(props, coordinates);
      return selectBox ? [selectBox, this.getHandles(props, domain)] : [];
    }

    // Overrides method in VictoryContainer
    getChildren(props) {
      return [..._react.default.Children.toArray(props.children), ...this.getRect(props)];
    }
  };
}
const VictoryBrushContainer = exports.VictoryBrushContainer = brushContainerMixin(_victoryCore.VictoryContainer);