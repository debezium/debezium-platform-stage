import React from "react";
import { VictoryContainer, DomainTuple, VictoryContainerProps } from "victory-core";
export interface VictoryBrushContainerProps extends VictoryContainerProps {
    allowDrag?: boolean;
    allowDraw?: boolean;
    allowResize?: boolean;
    brushComponent?: React.ReactElement;
    brushDimension?: "x" | "y";
    brushDomain?: {
        x?: DomainTuple;
        y?: DomainTuple;
    };
    brushStyle?: React.CSSProperties;
    defaultBrushArea?: "all" | "none" | "disable" | "move";
    disable?: boolean;
    handleComponent?: React.ReactElement;
    handleStyle?: React.CSSProperties;
    handleWidth?: number;
    onBrushCleared?: (domain: {
        x: DomainTuple;
        y: DomainTuple;
    }, props: VictoryBrushContainerProps) => void;
    onBrushDomainChange?: (domain: {
        x: DomainTuple;
        y: DomainTuple;
    }, props: VictoryBrushContainerProps) => void;
    onBrushDomainChangeEnd?: (domain: {
        x: DomainTuple;
        y: DomainTuple;
    }, props: VictoryBrushContainerProps) => void;
}
declare type ComponentClass<TProps> = {
    new (props: TProps): React.Component<TProps>;
};
export declare function brushContainerMixin<TBase extends ComponentClass<TProps>, TProps extends VictoryBrushContainerProps>(Base: TBase): {
    new (props: TProps): {
        getSelectBox(props: any, coordinates: any): React.DetailedReactHTMLElement<{
            key: string;
            width: number;
            height: number;
            x: number;
            y: number;
            cursor: string;
            style: any;
        }, HTMLElement> | null;
        getCursorPointers(props: any): {
            yProps: string;
            xProps: string;
        };
        getHandles(props: any, domain: any): React.ReactElement<any, string | React.JSXElementConstructor<any>>[] | null;
        getRect(props: any): (React.ReactElement<any, string | React.JSXElementConstructor<any>>[] | React.DetailedReactHTMLElement<{
            key: string;
            width: number;
            height: number;
            x: number;
            y: number;
            cursor: string;
            style: any;
        }, HTMLElement> | null)[];
        getChildren(props: any): (string | number | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | null)[];
        context: unknown;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<TProps>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        render(): React.ReactNode;
        readonly props: Readonly<TProps>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<TProps>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<TProps>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<TProps>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<TProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<TProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<TProps>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<TProps>, nextState: Readonly<{}>, nextContext: any): void;
    };
    displayName: string;
    defaultProps: {
        allowDrag: boolean;
        allowDraw: boolean;
        allowResize: boolean;
        brushComponent: JSX.Element;
        brushStyle: {
            stroke: string;
            fill: string;
            fillOpacity: number;
        };
        handleComponent: JSX.Element;
        handleStyle: {
            stroke: string;
            fill: string;
        };
        handleWidth: number;
        mouseMoveThreshold: number;
        className: string;
        portalComponent: JSX.Element;
        portalZIndex: number;
        responsive: boolean;
        role: string;
    };
    defaultEvents(props: any): {
        target: string;
        eventHandlers: {
            onMouseDown: (evt: any, targetProps: any) => {};
            onTouchStart: (evt: any, targetProps: any) => {};
            onGlobalMouseMove: (evt: any, targetProps: any) => {} | undefined;
            onGlobalTouchMove: (evt: any, targetProps: any) => {} | undefined;
            onGlobalMouseUp: (evt: any, targetProps: any) => {};
            onGlobalTouchEnd: (evt: any, targetProps: any) => {};
            onGlobalTouchCancel: (evt: any, targetProps: any) => {};
        };
    }[];
} & TBase;
export declare const VictoryBrushContainer: {
    new (props: VictoryBrushContainerProps): {
        getSelectBox(props: any, coordinates: any): React.DetailedReactHTMLElement<{
            key: string;
            width: number;
            height: number;
            x: number;
            y: number;
            cursor: string;
            style: any;
        }, HTMLElement> | null;
        getCursorPointers(props: any): {
            yProps: string;
            xProps: string;
        };
        getHandles(props: any, domain: any): React.ReactElement<any, string | React.JSXElementConstructor<any>>[] | null;
        getRect(props: any): (React.ReactElement<any, string | React.JSXElementConstructor<any>>[] | React.DetailedReactHTMLElement<{
            key: string;
            width: number;
            height: number;
            x: number;
            y: number;
            cursor: string;
            style: any;
        }, HTMLElement> | null)[];
        getChildren(props: any): (string | number | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | null)[];
        context: unknown;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<VictoryBrushContainerProps>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        render(): React.ReactNode;
        readonly props: Readonly<VictoryBrushContainerProps>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<VictoryBrushContainerProps>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<VictoryBrushContainerProps>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<VictoryBrushContainerProps>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<VictoryBrushContainerProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<VictoryBrushContainerProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<VictoryBrushContainerProps>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<VictoryBrushContainerProps>, nextState: Readonly<{}>, nextContext: any): void;
    };
    displayName: string;
    defaultProps: {
        allowDrag: boolean;
        allowDraw: boolean;
        allowResize: boolean;
        brushComponent: JSX.Element;
        brushStyle: {
            stroke: string;
            fill: string;
            fillOpacity: number;
        };
        handleComponent: JSX.Element;
        handleStyle: {
            stroke: string;
            fill: string;
        };
        handleWidth: number;
        mouseMoveThreshold: number;
        className: string;
        portalComponent: JSX.Element;
        portalZIndex: number;
        responsive: boolean;
        role: string;
    };
    defaultEvents(props: any): {
        target: string;
        eventHandlers: {
            onMouseDown: (evt: any, targetProps: any) => {};
            onTouchStart: (evt: any, targetProps: any) => {};
            onGlobalMouseMove: (evt: any, targetProps: any) => {} | undefined;
            onGlobalTouchMove: (evt: any, targetProps: any) => {} | undefined;
            onGlobalMouseUp: (evt: any, targetProps: any) => {};
            onGlobalTouchEnd: (evt: any, targetProps: any) => {};
            onGlobalTouchCancel: (evt: any, targetProps: any) => {};
        };
    }[];
} & typeof VictoryContainer;
export {};
//# sourceMappingURL=victory-brush-container.d.ts.map