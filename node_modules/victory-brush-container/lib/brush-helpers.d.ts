/// <reference types="lodash" />
export declare const BrushHelpers: {
    onMouseDown: (evt: any, targetProps: any) => {};
    onGlobalMouseUp: (evt: any, targetProps: any) => {};
    onGlobalMouseMove: import("lodash").DebouncedFunc<(evt: any, targetProps: any) => {}>;
    getDimension(props: any): any;
    withinBounds(point: any, bounds: any, padding?: any): boolean;
    getDomainBox(props: any, fullDomain: any, selectedDomain?: any): {
        x1: number;
        x2: number;
        y1: number;
        y2: number;
    };
    getHandles(props: any, domainBox: any): {
        left: false | {
            x1: number;
            x2: number;
            y1: any;
            y2: any;
        };
        right: false | {
            x1: number;
            x2: number;
            y1: any;
            y2: any;
        };
        top: false | {
            x1: any;
            x2: any;
            y1: number;
            y2: number;
        };
        bottom: false | {
            x1: any;
            x2: any;
            y1: number;
            y2: number;
        };
    };
    getActiveHandles(point: any, props: any, domainBox: any): 0 | string[];
    getResizeMutation(box: any, handles: any): any;
    getMinimumDomain(): {
        x: number[];
        y: number[];
    };
    getDefaultBrushArea(targetProps: any, cachedDomain: any, evt: any): any;
    getSelectionMutation(point: any, box: any, brushDimension: any): {
        x1: any;
        y1: any;
        x2: any;
        y2: any;
    };
    panBox(props: any, point: any): {
        x1: number;
        x2: number;
        y1: number;
        y2: number;
    };
    constrainBox(box: any, fullDomainBox: any): {
        x1: number;
        y1: number;
        x2: any;
        y2: any;
    };
    constrainPoint(point: any, fullDomainBox: any): {
        x: number;
        y: number;
    };
    hasMoved(props: any): boolean;
};
//# sourceMappingURL=brush-helpers.d.ts.map