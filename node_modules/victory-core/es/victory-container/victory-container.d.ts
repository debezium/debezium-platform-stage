import React from "react";
import { OriginType } from "../victory-label/victory-label";
import { D3Scale } from "../types/prop-types";
import { VictoryThemeDefinition } from "../victory-theme/types";
export interface VictoryContainerProps {
    "aria-describedby"?: string;
    "aria-labelledby"?: string;
    children?: React.ReactElement | React.ReactElement[];
    className?: string;
    containerId?: number | string;
    containerRef?: React.Ref<HTMLElement>;
    desc?: string;
    events?: React.DOMAttributes<any>;
    height?: number;
    name?: string;
    origin?: OriginType;
    ouiaId?: number | string;
    ouiaSafe?: boolean;
    ouiaType?: string;
    polar?: boolean;
    portalComponent?: React.ReactElement;
    portalZIndex?: number;
    preserveAspectRatio?: string;
    responsive?: boolean;
    role?: string;
    scale?: {
        x?: D3Scale;
        y?: D3Scale;
    };
    style?: React.CSSProperties;
    tabIndex?: number;
    theme?: VictoryThemeDefinition;
    title?: string;
    width?: number;
}
export declare class VictoryContainer<TProps extends VictoryContainerProps> extends React.Component<TProps> {
    static displayName: string;
    static role: string;
    static defaultProps: {
        className: string;
        portalComponent: JSX.Element;
        portalZIndex: number;
        responsive: boolean;
        role: string;
    };
    static contextType: React.Context<{
        transitionTimer: import("..").Timer;
        animationTimer: import("..").Timer;
    }>;
    private containerId;
    private portalRef;
    private containerRef;
    private shouldHandleWheel;
    constructor(props: TProps);
    savePortalRef: (portal: any) => any;
    portalUpdate: (key: any, el: any) => void;
    portalRegister: () => number;
    portalDeregister: (key: any) => void;
    saveContainerRef: (container: HTMLElement) => HTMLElement;
    handleWheel: (e: any) => any;
    componentDidMount(): void;
    componentWillUnmount(): void;
    getIdForElement(elementName: any): string;
    getChildren(props: any): any;
    getOUIAProps(props: any): any;
    renderContainer(props: any, svgProps: any, style: any): JSX.Element;
    render(): JSX.Element;
}
//# sourceMappingURL=victory-container.d.ts.map