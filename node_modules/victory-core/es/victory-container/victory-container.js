import _isObject from "lodash/isObject";
import _uniqueId from "lodash/uniqueId";
import _defaults from "lodash/defaults";
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
import React from "react";
import { Portal } from "../victory-portal/portal";
import { PortalContext } from "../victory-portal/portal-context";
import TimerContext from "../victory-util/timer-context";
import * as Helpers from "../victory-util/helpers";
import * as UserProps from "../victory-util/user-props";
export class VictoryContainer extends React.Component {
  static displayName = "VictoryContainer";
  static role = "container";
  static defaultProps = {
    className: "VictoryContainer",
    portalComponent: /*#__PURE__*/React.createElement(Portal, null),
    portalZIndex: 99,
    responsive: true,
    role: "img"
  };
  static contextType = TimerContext;

  // @ts-expect-error Ref will be initialized on mount

  // @ts-expect-error Ref will be initialized on mount

  constructor(props) {
    super(props);
    this.containerId = !_isObject(props) || props.containerId === undefined ? _uniqueId("victory-container-") : props.containerId;
    this.shouldHandleWheel = !!(props && props.events && props.events.onWheel);
  }
  savePortalRef = portal => {
    this.portalRef = portal;
    return portal;
  };
  portalUpdate = (key, el) => this.portalRef.portalUpdate(key, el);
  portalRegister = () => this.portalRef.portalRegister();
  portalDeregister = key => this.portalRef.portalDeregister(key);
  saveContainerRef = container => {
    if (Helpers.isFunction(this.props.containerRef)) {
      this.props.containerRef(container);
    }
    this.containerRef = container;
    return container;
  };
  handleWheel = e => e.preventDefault();
  componentDidMount() {
    if (this.shouldHandleWheel && this.containerRef) {
      this.containerRef.addEventListener("wheel", this.handleWheel);
    }
  }
  componentWillUnmount() {
    if (this.shouldHandleWheel && this.containerRef) {
      this.containerRef.removeEventListener("wheel", this.handleWheel);
    }
  }
  getIdForElement(elementName) {
    return `${this.containerId}-${elementName}`;
  }

  // overridden in custom containers
  getChildren(props) {
    return props.children;
  }

  // Get props defined by the Open UI Automation (OUIA) 1.0-RC spec
  // See https://ouia.readthedocs.io/en/latest/README.html#ouia-component
  getOUIAProps(props) {
    const {
      ouiaId,
      ouiaSafe,
      ouiaType
    } = props;
    return {
      ...(ouiaId && {
        "data-ouia-component-id": ouiaId
      }),
      ...(ouiaType && {
        "data-ouia-component-type": ouiaType
      }),
      ...(ouiaSafe !== undefined && {
        "data-ouia-safe": ouiaSafe
      })
    };
  }
  renderContainer(props, svgProps, style) {
    const {
      title,
      desc,
      portalComponent,
      className,
      width,
      height,
      portalZIndex,
      responsive
    } = props;
    const children = this.getChildren(props);
    const dimensions = responsive ? {
      width: "100%",
      height: "100%"
    } : {
      width,
      height
    };
    const divStyle = Object.assign({
      pointerEvents: "none",
      touchAction: "none",
      position: "relative"
    }, dimensions);
    const portalDivStyle = Object.assign({
      zIndex: portalZIndex,
      position: "absolute",
      top: 0,
      left: 0
    }, dimensions);
    const svgStyle = Object.assign({
      pointerEvents: "all"
    }, dimensions);
    const portalSvgStyle = Object.assign({
      overflow: "visible"
    }, dimensions);
    const portalProps = {
      width,
      height,
      viewBox: svgProps.viewBox,
      preserveAspectRatio: svgProps.preserveAspectRatio,
      style: portalSvgStyle
    };
    return /*#__PURE__*/React.createElement(PortalContext.Provider, {
      value: {
        portalUpdate: this.portalUpdate,
        portalRegister: this.portalRegister,
        portalDeregister: this.portalDeregister
      }
    }, /*#__PURE__*/React.createElement("div", _extends({
      style: _defaults({}, style, divStyle),
      className: className,
      ref: this.saveContainerRef
    }, this.getOUIAProps(props)), /*#__PURE__*/React.createElement("svg", _extends({}, svgProps, {
      style: svgStyle
    }), title ? /*#__PURE__*/React.createElement("title", {
      id: this.getIdForElement("title")
    }, title) : null, desc ? /*#__PURE__*/React.createElement("desc", {
      id: this.getIdForElement("desc")
    }, desc) : null, children), /*#__PURE__*/React.createElement("div", {
      style: portalDivStyle
    }, /*#__PURE__*/React.cloneElement(portalComponent, {
      ...portalProps,
      ref: this.savePortalRef
    }))));
  }
  render() {
    const {
      width,
      height,
      responsive,
      events,
      title,
      desc,
      tabIndex,
      preserveAspectRatio,
      role
    } = this.props;
    const style = responsive ? this.props.style : Helpers.omit(this.props.style, ["height", "width"]);
    const userProps = UserProps.getSafeUserProps(this.props);
    const svgProps = Object.assign({
      width,
      height,
      tabIndex,
      role,
      "aria-labelledby": [title && this.getIdForElement("title"), this.props["aria-labelledby"]].filter(Boolean).join(" ") || undefined,
      "aria-describedby": [desc && this.getIdForElement("desc"), this.props["aria-describedby"]].filter(Boolean).join(" ") || undefined,
      viewBox: responsive ? `0 0 ${width} ${height}` : undefined,
      preserveAspectRatio: responsive ? preserveAspectRatio : undefined,
      ...userProps
    }, events);
    return this.renderContainer(this.props, svgProps, style);
  }
}