/**
 * Convert length-type parameters from specific measurement units to pixels
 * @param  {string} length Css length string value.
 * @param  {number} fontSize Current text font-size.
 * @returns {number} Approximate Css length in pixels.
 */
export declare const convertLengthToPixels: (length: string, fontSize?: number) => number;
export interface TextSizeStyleInterface {
    angle?: number;
    fontFamily?: string;
    fontSize?: number | string;
    letterSpacing?: string;
    lineHeight?: number;
}
export declare const _approximateTextSizeInternal: {
    impl: (text: string | string[], style?: TextSizeStyleInterface, __debugForceApproximate?: boolean) => {
        width: number;
        height: number;
    };
};
/**
 * Predict text size by font params.
 * @param {string|string[]} text Content for width calculation.
 * @param {Object} style Text styles, ,fontFamily, fontSize, etc.
 * @param {string} style.fontFamily Text fontFamily.
 * @param {(number|string)} style.fontSize Text fontSize.
 * @param {number} style.angle Text rotate angle.
 * @param {string} style.letterSpacing Text letterSpacing(space between letters).
 * @param {number} style.lineHeight Line height coefficient.
 * @returns {number} Approximate text label height.
 */
export declare const approximateTextSize: (text: string | string[], style?: TextSizeStyleInterface) => {
    width: number;
    height: number;
};
//# sourceMappingURL=textsize.d.ts.map