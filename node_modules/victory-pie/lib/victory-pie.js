"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VictoryPie = void 0;
var _react = _interopRequireDefault(require("react"));
var _victoryCore = require("victory-core");
var _helperMethods = require("./helper-methods");
var _slice = require("./slice");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const fallbackProps = {
  endAngle: 360,
  height: 400,
  innerRadius: 0,
  cornerRadius: 0,
  padAngle: 0,
  padding: 30,
  width: 400,
  startAngle: 0,
  colorScale: ["#ffffff", "#f0f0f0", "#d9d9d9", "#bdbdbd", "#969696", "#737373", "#525252", "#252525", "#000000"],
  labelPosition: "centroid",
  labelIndicatorInnerOffset: 15,
  labelIndicatorOuterOffset: 5
};
const datumHasXandY = datum => {
  return !_victoryCore.Helpers.isNil(datum._x) && !_victoryCore.Helpers.isNil(datum._y);
};

// eslint-disable-next-line @typescript-eslint/no-empty-interface

class VictoryPieBase extends _react.default.Component {
  static animationWhitelist = ["data", "endAngle", "height", "innerRadius", "cornerRadius", "padAngle", "padding", "colorScale", "startAngle", "style", "width"];
  static displayName = "VictoryPie";
  static role = "pie";
  static defaultTransitions = {
    onExit: {
      duration: 500,
      before: () => ({
        _y: 0,
        label: " "
      })
    },
    onEnter: {
      duration: 500,
      before: () => ({
        _y: 0,
        label: " "
      }),
      after: datum => ({
        y_: datum._y,
        label: datum.label
      })
    }
  };
  static defaultProps = {
    data: [{
      x: "A",
      y: 1
    }, {
      x: "B",
      y: 2
    }, {
      x: "C",
      y: 3
    }, {
      x: "D",
      y: 1
    }, {
      x: "E",
      y: 2
    }],
    standalone: true,
    dataComponent: /*#__PURE__*/_react.default.createElement(_slice.Slice, null),
    labelComponent: /*#__PURE__*/_react.default.createElement(_victoryCore.VictoryLabel, null),
    containerComponent: /*#__PURE__*/_react.default.createElement(_victoryCore.VictoryContainer, null),
    groupComponent: /*#__PURE__*/_react.default.createElement("g", null),
    sortOrder: "ascending",
    theme: _victoryCore.VictoryTheme.grayscale
  };
  static getBaseProps(props) {
    return (0, _helperMethods.getBaseProps)(props, fallbackProps);
  }
  static getData = _victoryCore.Data.getData;
  static expectedComponents = ["dataComponent", "labelComponent", "groupComponent", "containerComponent", "labelIndicatorComponent"];

  // Overridden in victory-native
  shouldAnimate() {
    return Boolean(this.props.animate);
  }
  renderComponents(props, shouldRenderDatum) {
    if (shouldRenderDatum === void 0) {
      shouldRenderDatum = datumHasXandY;
    }
    const {
      dataComponent,
      labelComponent,
      groupComponent,
      labelIndicator,
      labelPosition
    } = props;
    if (!groupComponent) {
      throw new Error("VictoryPie expects a groupComponent prop");
    }
    const showIndicator = labelIndicator && labelPosition === "centroid";
    const children = [];
    if (dataComponent) {
      const dataComponents = this.dataKeys.reduce((validDataComponents, _dataKey, index) => {
        const dataProps = this.getComponentProps(dataComponent, "data", index);
        if (shouldRenderDatum(dataProps.datum)) {
          validDataComponents.push( /*#__PURE__*/_react.default.cloneElement(dataComponent, dataProps));
        }
        return validDataComponents;
      }, []);
      children.push(...dataComponents);
    }
    if (labelComponent) {
      const labelComponents = this.dataKeys.map((_dataKey, index) => {
        const labelProps = this.getComponentProps(labelComponent, "labels", index);
        if (labelProps.text !== undefined && labelProps.text !== null) {
          return /*#__PURE__*/_react.default.cloneElement(labelComponent, labelProps);
        }
        return undefined;
      }).filter(comp => comp !== undefined);
      children.push(...labelComponents);
    }
    if (showIndicator && labelIndicator) {
      let labelIndicatorComponent = /*#__PURE__*/_react.default.createElement(_victoryCore.LineSegment, null);
      if (typeof labelIndicator === "object") {
        // pass user provided react component
        labelIndicatorComponent = labelIndicator;
      }
      const labelIndicatorComponents = this.dataKeys.map((_dataKey, index) => {
        const labelIndicatorProps = this.getComponentProps(labelIndicatorComponent, "labelIndicators", index);
        return /*#__PURE__*/_react.default.cloneElement(labelIndicatorComponent, labelIndicatorProps);
      });
      children.push(...labelIndicatorComponents);
    }
    return this.renderContainer(groupComponent, children);
  }
  render() {
    const {
      animationWhitelist,
      role
    } = VictoryPie;
    const props = _victoryCore.Helpers.modifyProps(this.props, fallbackProps, role);
    if (this.shouldAnimate()) {
      return this.animateComponent(props, animationWhitelist);
    }
    const children = this.renderComponents(props);
    const component = props.standalone ? this.renderContainer(props.containerComponent, children) : children;
    return _victoryCore.UserProps.withSafeUserProps(component, props);
  }
}
const VictoryPie = exports.VictoryPie = (0, _victoryCore.addEvents)(VictoryPieBase);