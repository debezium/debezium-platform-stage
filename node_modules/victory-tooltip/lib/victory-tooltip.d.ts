import React from "react";
import { VictoryLabelableProps, VictoryLabelProps, VictoryLabelStyleObject, NumberOrCallback, PaddingOrCallback, VictoryStyleObject, OrientationTypes, VictoryThemeDefinition } from "victory-core";
export interface VictoryTooltipProps extends VictoryLabelableProps, VictoryLabelProps {
    activateData?: boolean;
    active?: boolean;
    activePoints?: any[];
    angle?: number;
    center?: {
        x?: number;
        y?: number;
    };
    centerOffset?: {
        x?: NumberOrCallback;
        y?: NumberOrCallback;
    };
    constrainToVisibleArea?: boolean;
    cornerRadius?: NumberOrCallback;
    events?: any;
    height?: number;
    horizontal?: boolean;
    flyoutComponent?: React.ReactElement;
    flyoutHeight?: NumberOrCallback;
    flyoutPadding?: PaddingOrCallback;
    flyoutStyle?: VictoryStyleObject;
    flyoutWidth?: NumberOrCallback;
    id?: number | string;
    index?: number | string;
    orientation?: OrientationTypes | ((...args: any[]) => OrientationTypes);
    pointerLength?: NumberOrCallback;
    pointerOrientation?: OrientationTypes | ((...args: any[]) => OrientationTypes);
    pointerWidth?: NumberOrCallback;
    style?: (VictoryLabelStyleObject & {
        angle?: number;
    }) | VictoryLabelStyleObject[];
    theme?: VictoryThemeDefinition;
    width?: number;
}
declare type InternalEvaluatedProps = VictoryTooltipProps & {
    centerOffset: {
        x: number;
        y: number;
    };
    cornerRadius?: number;
    dx?: string | number;
    dy?: string | number;
    flyoutHeight: number;
    flyoutPadding: {
        top: number;
        bottom: number;
        left: number;
        right: number;
    };
    flyoutWidth: number;
    orientation: OrientationTypes;
    pointerLength?: number;
    pointerWidth?: number;
    style: any;
    text: string | string[];
};
declare type EventHandlers = Record<string, (props?: any) => {
    target: string;
    mutation: () => {
        active?: boolean | undefined;
    };
}[]>;
export declare class VictoryTooltip extends React.Component<VictoryTooltipProps> {
    static displayName: string;
    static role: string;
    static defaultProps: {
        active: boolean;
        renderInPortal: boolean;
        labelComponent: JSX.Element;
        flyoutComponent: JSX.Element;
        groupComponent: JSX.Element;
    };
    static defaultEvents(props: VictoryTooltipProps): {
        target: string;
        eventHandlers: EventHandlers;
    }[];
    id: string | number;
    constructor(props: VictoryTooltipProps);
    getDefaultOrientation(props: VictoryTooltipProps): OrientationTypes;
    getPolarOrientation(props: VictoryTooltipProps): OrientationTypes;
    getVerticalOrientations(degrees: number): OrientationTypes;
    getStyles(props: any): {
        style: any;
        flyoutStyle: any;
    };
    getEvaluatedProps(props: VictoryTooltipProps): InternalEvaluatedProps;
    getCalculatedValues(props: InternalEvaluatedProps): {
        style: any;
        flyoutStyle?: VictoryStyleObject;
        labelSize: {
            width: number;
            height: number;
        };
        flyoutDimensions: {
            height: number;
            width: number;
        };
        flyoutCenter: {
            x: number;
            y: number;
        };
        transform?: string;
    };
    getTransform(props: any): string | undefined;
    getDefaultAngle(props: any): number;
    constrainTooltip(center: any, props: any, dimensions: any): {
        x: number;
        y: number;
    };
    getFlyoutCenter(props: any, dimensions: any): {
        x: any;
        y: any;
    };
    getLabelPadding(style: any): number;
    getDimensions(props: any, labelSize: any): {
        flyoutHeight: any;
        flyoutWidth: any;
    };
    getLabelProps(props: InternalEvaluatedProps, calculatedValues: any): any;
    getPointerOrientation(point: {
        x: number;
        y: number;
    }, center: {
        x: number;
        y: number;
    }, flyoutDimensions: {
        height: number;
        width: number;
    }): string;
    getFlyoutProps(props: InternalEvaluatedProps, calculatedValues: any): any;
    renderTooltip(props: VictoryTooltipProps): React.ReactElement | null;
    render(): React.ReactElement | null;
}
export {};
//# sourceMappingURL=victory-tooltip.d.ts.map