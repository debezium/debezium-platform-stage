"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VictorySelectionContainer = void 0;
exports.selectionContainerMixin = selectionContainerMixin;
var _react = _interopRequireDefault(require("react"));
var _victoryCore = require("victory-core");
var _selectionHelpers = require("./selection-helpers");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function selectionContainerMixin(Base) {
  // @ts-expect-error "TS2545: A mixin class must have a constructor with a single rest parameter of type 'any[]'."
  return class VictorySelectionContainer extends Base {
    static displayName = "VictorySelectionContainer";
    static defaultProps = {
      ..._victoryCore.VictoryContainer.defaultProps,
      activateSelectedData: true,
      allowSelection: true,
      selectionComponent: /*#__PURE__*/_react.default.createElement(_victoryCore.Rect, null),
      selectionStyle: {
        stroke: "transparent",
        fill: "black",
        fillOpacity: 0.1
      }
    };
    static defaultEvents(props) {
      return [{
        target: "parent",
        eventHandlers: {
          onMouseDown: (evt, targetProps) => {
            return props.disable ? {} : _selectionHelpers.SelectionHelpers.onMouseDown(evt, targetProps);
          },
          onTouchStart: (evt, targetProps) => {
            return props.disable ? {} : _selectionHelpers.SelectionHelpers.onMouseDown(evt, targetProps);
          },
          onMouseMove: (evt, targetProps) => {
            return props.disable ? {} : _selectionHelpers.SelectionHelpers.onMouseMove(evt, targetProps);
          },
          onTouchMove: (evt, targetProps) => {
            return props.disable ? {} : _selectionHelpers.SelectionHelpers.onMouseMove(evt, targetProps);
          },
          onMouseUp: (evt, targetProps) => {
            return props.disable ? {} : _selectionHelpers.SelectionHelpers.onMouseUp(evt, targetProps);
          },
          onTouchEnd: (evt, targetProps) => {
            return props.disable ? {} : _selectionHelpers.SelectionHelpers.onMouseUp(evt, targetProps);
          }
        }
      }];
    }
    getRect(props) {
      const {
        x1,
        x2,
        y1,
        y2,
        selectionStyle,
        selectionComponent,
        name
      } = props;
      const width = Math.abs(x2 - x1) || 1;
      const height = Math.abs(y2 - y1) || 1;
      const x = Math.min(x1, x2);
      const y = Math.min(y1, y2);
      return y2 && x2 && x1 && y1 ? /*#__PURE__*/_react.default.cloneElement(selectionComponent, {
        key: `${name}-selection`,
        x,
        y,
        width,
        height,
        style: selectionStyle
      }) : null;
    }

    // Overrides method in VictoryContainer
    getChildren(props) {
      return [..._react.default.Children.toArray(props.children), this.getRect(props)];
    }
  };
}
const VictorySelectionContainer = exports.VictorySelectionContainer = selectionContainerMixin(_victoryCore.VictoryContainer);