/// <reference types="lodash" />
import { Selection } from "victory-core";
export declare const RawZoomHelpers: {
    checkDomainEquality(a: any, b: any): boolean;
    /**
     * Generates a new domain scaled by factor and constrained by the original domain.
     * @param  {[Number, Number]} currentDomain  The domain to be scaled.
     * @param  {Object} evt the event object
     * @param  {Object} props the props of the targeted component
     * @param  {String} axis the desired dimension (either x or y)
     * @return {[Number, Number]}                The scale domain
     */
    scale(currentDomain: any, evt: any, props: any, axis: any): any;
    getScaledDomain(currentDomain: any, factor: any, percent: any): number[];
    getMinimumDomain(point: any, props: any, axis: any): any[];
    zoommingOut(evt: any): boolean;
    getScaleFactor(evt: any): number;
    getScalePercent(evt: any, props: any, axis: any): number;
    getPosition(evt: any, props: any, originalDomain: any): Selection.SVGCoordinateType;
    /**
     * Generate a new domain translated by the delta and constrained by the original domain.
     * @param  {[Number, Number]} currentDomain  The domain to be translated.
     * @param  {[Number, Number]} originalDomain The original domain for the data set.
     * @param  {Number}           delta          The delta to translate by
     * @return {[Number, Number]}                The translated domain
     */
    pan(currentDomain: any, originalDomain: any, delta: any): any;
    getDomainScale(domain: any, scale: any, axis: any): number;
    handleAnimation(ctx: any): number;
    getLastDomain(targetProps: any, originalDomain: any): any;
    getDomain(props: any): any;
    onMouseDown(evt: any, targetProps: any): {
        target: string;
        mutation: () => {
            startX: number;
            startY: number;
            panning: boolean;
            parentSVG: any;
            parentControlledProps: string[];
        };
    }[] | undefined;
    onMouseUp(evt: any, targetProps: any): {
        target: string;
        mutation: () => {
            panning: boolean;
        };
    }[] | undefined;
    onMouseLeave(evt: any, targetProps: any): {
        target: string;
        mutation: () => {
            panning: boolean;
        };
    }[] | undefined;
    onMouseMove(evt: any, targetProps: any, eventKey: any, ctx: any): {
        target: string;
        callback: number;
        mutation: () => {
            parentControlledProps: string[];
            startX: number;
            startY: number;
            parentSVG: any;
            currentDomain: {
                x: any;
                y: any;
            };
            originalDomain: any;
            cachedZoomDomain: any;
            zoomActive: boolean;
        };
    }[] | undefined;
    onWheel(evt: any, targetProps: any, eventKey: any, ctx: any): {
        target: string;
        callback: number;
        mutation: () => {
            currentDomain: {
                x: any;
                y: any;
            };
            originalDomain: any;
            cachedZoomDomain: any;
            parentControlledProps: string[];
            panning: boolean;
            zoomActive: any;
        };
    }[] | undefined;
};
export declare const ZoomHelpers: {
    checkDomainEquality: (a: any, b: any) => boolean;
    onMouseDown: (evt: any, targetProps: any) => {
        target: string;
        mutation: () => {
            startX: number;
            startY: number;
            panning: boolean;
            parentSVG: any;
            parentControlledProps: string[];
        };
    }[] | undefined;
    onMouseUp: (evt: any, targetProps: any) => {
        target: string;
        mutation: () => {
            panning: boolean;
        };
    }[] | undefined;
    onMouseLeave: (evt: any, targetProps: any) => {
        target: string;
        mutation: () => {
            panning: boolean;
        };
    }[] | undefined;
    onMouseMove: import("lodash").DebouncedFunc<(evt: any, targetProps: any, eventKey: any, ctx: any) => {
        target: string;
        callback: number;
        mutation: () => {
            parentControlledProps: string[];
            startX: number;
            startY: number;
            parentSVG: any;
            currentDomain: {
                x: any;
                y: any;
            };
            originalDomain: any;
            cachedZoomDomain: any;
            zoomActive: boolean;
        };
    }[] | undefined>;
    onWheel: import("lodash").DebouncedFunc<(evt: any, targetProps: any, eventKey: any, ctx: any) => {
        target: string;
        callback: number;
        mutation: () => {
            currentDomain: {
                x: any;
                y: any;
            };
            originalDomain: any;
            cachedZoomDomain: any;
            parentControlledProps: string[];
            panning: boolean;
            zoomActive: any;
        };
    }[] | undefined>;
};
//# sourceMappingURL=zoom-helpers.d.ts.map