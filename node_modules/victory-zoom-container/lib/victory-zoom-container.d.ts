/// <reference types="lodash" />
import React from "react";
import { DomainTuple, VictoryContainer, VictoryContainerProps } from "victory-core";
export declare type ZoomDimensionType = "x" | "y";
export interface VictoryZoomContainerProps extends VictoryContainerProps {
    allowPan?: boolean;
    allowZoom?: boolean;
    clipContainerComponent?: React.ReactElement;
    disable?: boolean;
    downsample?: number | boolean;
    minimumZoom?: {
        x?: number;
        y?: number;
    };
    onZoomDomainChange?: (domain: {
        x: DomainTuple;
        y: DomainTuple;
    }, props: VictoryZoomContainerProps) => void;
    zoomDimension?: ZoomDimensionType;
    zoomDomain?: {
        x?: DomainTuple;
        y?: DomainTuple;
    };
}
declare type ComponentClass<TProps> = {
    new (props: TProps): React.Component<TProps>;
};
export declare function zoomContainerMixin<TBase extends ComponentClass<TProps>, TProps extends VictoryZoomContainerProps>(Base: TBase): {
    new (props: TProps): {
        clipDataComponents(children: React.ReactElement[], props: any): (string | number | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment)[];
        modifyPolarDomain(domain: any, originalDomain: any): {
            x: any;
            y: any[];
        };
        downsampleZoomData(props: any, child: any, domain: any): any;
        modifyChildren(props: any): React.ReactElement<any, string | React.JSXElementConstructor<any>>[];
        getChildren(props: TProps): (string | number | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment)[];
        context: unknown;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<TProps>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        render(): React.ReactNode;
        readonly props: Readonly<TProps>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<TProps>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<TProps>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<TProps>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<TProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<TProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<TProps>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<TProps>, nextState: Readonly<{}>, nextContext: any): void;
    };
    displayName: string;
    defaultProps: {
        clipContainerComponent: JSX.Element;
        allowPan: boolean;
        allowZoom: boolean;
        zoomActive: boolean;
        className: string;
        portalComponent: JSX.Element;
        portalZIndex: number;
        responsive: boolean;
        role: string;
    };
    defaultEvents(props: TProps): {
        target: string;
        eventHandlers: {
            onWheel?: import("lodash").DebouncedFunc<(evt: any, targetProps: any, eventKey: any, ctx: any) => {
                target: string;
                callback: number;
                mutation: () => {
                    currentDomain: {
                        x: any;
                        y: any;
                    };
                    originalDomain: any;
                    cachedZoomDomain: any;
                    parentControlledProps: string[];
                    panning: boolean;
                    zoomActive: any;
                };
            }[] | undefined> | undefined;
            onMouseDown: (evt: any, targetProps: any) => {} | undefined;
            onTouchStart: (evt: any, targetProps: any) => {} | undefined;
            onMouseUp: (evt: any, targetProps: any) => {} | undefined;
            onTouchEnd: (evt: any, targetProps: any) => {} | undefined;
            onMouseLeave: (evt: any, targetProps: any) => {} | undefined;
            onTouchCancel: (evt: any, targetProps: any) => {} | undefined;
            onMouseMove: (evt: any, targetProps: any, eventKey: any, ctx: any) => {} | undefined;
            onTouchMove: (evt: any, targetProps: any, eventKey: any, ctx: any) => {} | undefined;
        };
    }[];
} & TBase;
export declare const VictoryZoomContainer: {
    new (props: VictoryZoomContainerProps): {
        clipDataComponents(children: React.ReactElement[], props: any): (string | number | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment)[];
        modifyPolarDomain(domain: any, originalDomain: any): {
            x: any;
            y: any[];
        };
        downsampleZoomData(props: any, child: any, domain: any): any;
        modifyChildren(props: any): React.ReactElement<any, string | React.JSXElementConstructor<any>>[];
        getChildren(props: VictoryZoomContainerProps): (string | number | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment)[];
        context: unknown;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<VictoryZoomContainerProps>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        render(): React.ReactNode;
        readonly props: Readonly<VictoryZoomContainerProps>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<VictoryZoomContainerProps>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<VictoryZoomContainerProps>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<VictoryZoomContainerProps>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<VictoryZoomContainerProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<VictoryZoomContainerProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<VictoryZoomContainerProps>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<VictoryZoomContainerProps>, nextState: Readonly<{}>, nextContext: any): void;
    };
    displayName: string;
    defaultProps: {
        clipContainerComponent: JSX.Element;
        allowPan: boolean;
        allowZoom: boolean;
        zoomActive: boolean;
        className: string;
        portalComponent: JSX.Element;
        portalZIndex: number;
        responsive: boolean;
        role: string;
    };
    defaultEvents(props: VictoryZoomContainerProps): {
        target: string;
        eventHandlers: {
            onWheel?: import("lodash").DebouncedFunc<(evt: any, targetProps: any, eventKey: any, ctx: any) => {
                target: string;
                callback: number;
                mutation: () => {
                    currentDomain: {
                        x: any;
                        y: any;
                    };
                    originalDomain: any;
                    cachedZoomDomain: any;
                    parentControlledProps: string[];
                    panning: boolean;
                    zoomActive: any;
                };
            }[] | undefined> | undefined;
            onMouseDown: (evt: any, targetProps: any) => {} | undefined;
            onTouchStart: (evt: any, targetProps: any) => {} | undefined;
            onMouseUp: (evt: any, targetProps: any) => {} | undefined;
            onTouchEnd: (evt: any, targetProps: any) => {} | undefined;
            onMouseLeave: (evt: any, targetProps: any) => {} | undefined;
            onTouchCancel: (evt: any, targetProps: any) => {} | undefined;
            onMouseMove: (evt: any, targetProps: any, eventKey: any, ctx: any) => {} | undefined;
            onTouchMove: (evt: any, targetProps: any, eventKey: any, ctx: any) => {} | undefined;
        };
    }[];
} & typeof VictoryContainer;
export {};
//# sourceMappingURL=victory-zoom-container.d.ts.map