import React from "react";
import { VictoryContainer, VictoryContainerProps, PaddingProps } from "victory-core";
declare type ComponentClass<TProps> = {
    new (props: TProps): React.Component<TProps>;
};
export interface VictoryVoronoiContainerProps extends VictoryContainerProps {
    activateData?: boolean;
    activateLabels?: boolean;
    disable?: boolean;
    labels?: (point: any, index: number, points: any[]) => string;
    labelComponent?: React.ReactElement;
    mouseFollowTooltips?: boolean;
    onActivated?: (points: any[], props: VictoryVoronoiContainerProps) => void;
    onDeactivated?: (points: any[], props: VictoryVoronoiContainerProps) => void;
    radius?: number;
    voronoiBlacklist?: (string | RegExp)[];
    voronoiDimension?: "x" | "y";
    voronoiPadding?: PaddingProps;
}
export declare function voronoiContainerMixin<TBase extends ComponentClass<TProps>, TProps extends VictoryVoronoiContainerProps>(Base: TBase): {
    new (props: TProps): {
        getDimension(props: any): any;
        getPoint(point: any): Pick<any, string>;
        getLabelPosition(props: any, labelProps: any, points: any): {
            center: any;
            x: any;
            x0: any;
            y: any;
            y0: any;
        } | {
            x: any;
            y: any;
            center: any;
        };
        getStyle(props: any, points: any, type: any): any;
        getDefaultLabelProps(props: any, points: any): {
            orientation: string | undefined;
            pointerLength: number | undefined;
            constrainToVisibleArea: boolean | undefined;
        };
        getLabelProps(props: any, points: any): any;
        getTooltip(props: any): React.DetailedReactHTMLElement<any, HTMLElement> | null;
        getChildren(props: VictoryVoronoiContainerProps): (string | number | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | null)[];
        context: unknown;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<TProps>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        render(): React.ReactNode;
        readonly props: Readonly<TProps>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<TProps>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<TProps>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<TProps>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<TProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<TProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<TProps>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<TProps>, nextState: Readonly<{}>, nextContext: any): void;
    };
    displayName: string;
    defaultProps: VictoryVoronoiContainerProps;
    defaultEvents(props: VictoryVoronoiContainerProps): ({
        target: string;
        eventHandlers: {
            onMouseLeave: (evt: any, targetProps: any) => {};
            onTouchCancel: (evt: any, targetProps: any) => {};
            onMouseMove: (evt: any, targetProps: any) => {} | undefined;
            onTouchMove: (evt: any, targetProps: any) => {} | undefined;
            onMouseOver?: undefined;
            onMouseOut?: undefined;
        };
    } | {
        target: string;
        eventHandlers: {
            onMouseLeave?: undefined;
            onTouchCancel?: undefined;
            onMouseMove?: undefined;
            onTouchMove?: undefined;
            onMouseOver?: undefined;
            onMouseOut?: undefined;
        } | {
            onMouseOver: () => null;
            onMouseOut: () => null;
            onMouseMove: () => null;
            onMouseLeave?: undefined;
            onTouchCancel?: undefined;
            onTouchMove?: undefined;
        };
    })[];
} & TBase;
export declare const VictoryVoronoiContainer: {
    new (props: VictoryVoronoiContainerProps): {
        getDimension(props: any): any;
        getPoint(point: any): Pick<any, string>;
        getLabelPosition(props: any, labelProps: any, points: any): {
            center: any;
            x: any;
            x0: any;
            y: any;
            y0: any;
        } | {
            x: any;
            y: any;
            center: any;
        };
        getStyle(props: any, points: any, type: any): any;
        getDefaultLabelProps(props: any, points: any): {
            orientation: string | undefined;
            pointerLength: number | undefined;
            constrainToVisibleArea: boolean | undefined;
        };
        getLabelProps(props: any, points: any): any;
        getTooltip(props: any): React.DetailedReactHTMLElement<any, HTMLElement> | null;
        getChildren(props: VictoryVoronoiContainerProps): (string | number | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | null)[];
        context: unknown;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<VictoryVoronoiContainerProps>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        render(): React.ReactNode;
        readonly props: Readonly<VictoryVoronoiContainerProps>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<VictoryVoronoiContainerProps>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<VictoryVoronoiContainerProps>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<VictoryVoronoiContainerProps>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<VictoryVoronoiContainerProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<VictoryVoronoiContainerProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<VictoryVoronoiContainerProps>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<VictoryVoronoiContainerProps>, nextState: Readonly<{}>, nextContext: any): void;
    };
    displayName: string;
    defaultProps: VictoryVoronoiContainerProps;
    defaultEvents(props: VictoryVoronoiContainerProps): ({
        target: string;
        eventHandlers: {
            onMouseLeave: (evt: any, targetProps: any) => {};
            onTouchCancel: (evt: any, targetProps: any) => {};
            onMouseMove: (evt: any, targetProps: any) => {} | undefined;
            onTouchMove: (evt: any, targetProps: any) => {} | undefined;
            onMouseOver?: undefined;
            onMouseOut?: undefined;
        };
    } | {
        target: string;
        eventHandlers: {
            onMouseLeave?: undefined;
            onTouchCancel?: undefined;
            onMouseMove?: undefined;
            onTouchMove?: undefined;
            onMouseOver?: undefined;
            onMouseOut?: undefined;
        } | {
            onMouseOver: () => null;
            onMouseOut: () => null;
            onMouseMove: () => null;
            onMouseLeave?: undefined;
            onTouchCancel?: undefined;
            onTouchMove?: undefined;
        };
    })[];
} & typeof VictoryContainer;
export {};
//# sourceMappingURL=victory-voronoi-container.d.ts.map