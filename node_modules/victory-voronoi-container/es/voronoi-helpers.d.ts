/// <reference types="lodash" />
declare class VoronoiHelpersClass {
    withinBounds(props: any, point: any): boolean;
    getDatasets(props: any): any;
    findPoints(datasets: any, point: any): any;
    withinRadius(point: any, mousePosition: any, radius: any): boolean;
    getVoronoiPoints(props: any, mousePosition: any): {
        points: any;
        index: any;
    };
    getActiveMutations(props: any, point: any): {
        childName: any;
        eventKey: any;
        target: string;
        mutation: () => {
            active: boolean;
        };
    }[];
    getInactiveMutations(props: any, point: any): {
        childName: any;
        eventKey: any;
        target: string;
        mutation: () => null;
    }[];
    getParentMutation(activePoints: any, mousePosition?: any, parentSVG?: any, vIndex?: any): {
        target: string;
        eventKey: string;
        mutation: () => {
            activePoints: any;
            mousePosition: any;
            parentSVG: any;
            vIndex: any;
        };
    }[];
    onActivated(props: any, points: any): void;
    onDeactivated(props: any, points: any): void;
    onMouseLeave: (evt: any, targetProps: any) => {
        target: string;
        eventKey: string;
        mutation: () => {
            activePoints: any;
            mousePosition: any;
            parentSVG: any;
            vIndex: any;
        };
    }[];
    private handleMouseMove;
    onMouseMove: import("lodash").DebouncedFunc<(evt: any, targetProps: any) => {
        target: string;
        eventKey: string;
        mutation: () => {
            activePoints: any;
            mousePosition: any;
            parentSVG: any;
            vIndex: any;
        };
    }[]>;
}
export declare const VoronoiHelpers: VoronoiHelpersClass;
export {};
//# sourceMappingURL=voronoi-helpers.d.ts.map