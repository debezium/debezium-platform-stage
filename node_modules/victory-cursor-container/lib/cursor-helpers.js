"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CursorHelpers = void 0;
var _throttle2 = _interopRequireDefault(require("lodash/throttle"));
var _victoryCore = require("victory-core");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const ON_MOUSE_MOVE_THROTTLE_MS = 16;
class CursorHelpersClass {
  getDimension(props) {
    const {
      horizontal,
      cursorDimension
    } = props;
    if (!horizontal || !cursorDimension) {
      return cursorDimension;
    }
    return cursorDimension === "x" ? "y" : "x";
  }
  withinBounds(point, bounds) {
    const {
      x1,
      x2,
      y1,
      y2
    } = _victoryCore.Helpers.mapValues(bounds, Number);
    const {
      x,
      y
    } = _victoryCore.Helpers.mapValues(point, Number);
    return x >= Math.min(x1, x2) && x <= Math.max(x1, x2) && y >= Math.min(y1, y2) && y <= Math.max(y1, y2);
  }
  handleMouseMove = (evt, targetProps) => {
    const {
      onCursorChange,
      domain
    } = targetProps;
    const cursorDimension = this.getDimension(targetProps);
    const parentSVG = targetProps.parentSVG || _victoryCore.Selection.getParentSVG(evt);
    const cursorSVGPosition = _victoryCore.Selection.getSVGEventCoordinates(evt, parentSVG);
    let cursorValue = _victoryCore.Selection.getDataCoordinates(targetProps, targetProps.scale, cursorSVGPosition.x, cursorSVGPosition.y);
    const inBounds = this.withinBounds(cursorValue, {
      x1: domain.x[0],
      x2: domain.x[1],
      y1: domain.y[0],
      y2: domain.y[1]
    });
    if (!inBounds) {
      cursorValue = null;
    }
    if (_victoryCore.Helpers.isFunction(onCursorChange)) {
      if (cursorValue) {
        const value = cursorDimension ? cursorValue[cursorDimension] : cursorValue;
        onCursorChange(value, targetProps);
      } else if (cursorValue !== targetProps.cursorValue) {
        onCursorChange(targetProps.defaultCursorValue || null, targetProps);
      }
    }
    return [{
      target: "parent",
      eventKey: "parent",
      mutation: () => ({
        cursorValue,
        parentSVG
      })
    }];
  };
  onMouseMove = (0, _throttle2.default)(this.handleMouseMove, ON_MOUSE_MOVE_THROTTLE_MS, {
    leading: true,
    trailing: false
  });
  onMouseLeave = this.handleMouseMove;
  onTouchEnd = (evt, targetProps) => {
    const {
      onCursorChange
    } = targetProps;
    if (_victoryCore.Helpers.isFunction(targetProps.onCursorChange)) {
      onCursorChange(null, targetProps);
    }
    return [{
      target: "parent",
      eventKey: "parent",
      mutation: () => ({
        cursorValue: null
      })
    }];
  };
}
const CursorHelpers = exports.CursorHelpers = new CursorHelpersClass();

/* {
  ...CursorHelpers,
  onMouseMove: throttle(
    CursorHelpers.onMouseMove.bind(CursorHelpers),
    ON_MOUSE_MOVE_THROTTLE_MS,
    {
      leading: true,
      trailing: false,
    },
  ),
  onMouseLeave: CursorHelpers.onMouseMove.bind(CursorHelpers),
  onTouchEnd: CursorHelpers.onTouchEnd.bind(CursorHelpers),
};


   */