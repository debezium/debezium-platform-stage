import React from "react";
export declare type ContainerType = "brush" | "cursor" | "selection" | "voronoi" | "zoom";
declare type MixinFunction = (...args: any[]) => any;
export declare const combineContainerMixins: (mixins: MixinFunction[], Container: React.ComponentType<any>) => {
    new (): {
        [x: string]: any;
        getChildren(props: any): any;
    };
    [x: string]: any;
    displayName: string;
    propTypes: any;
    defaultProps: any;
    defaultEvents(props: any): ({
        target: string;
        eventHandlers: any;
    } | null)[];
};
export declare const makeCreateContainerFunction: (mixinMap: Record<ContainerType, MixinFunction[]>, Container: React.ComponentType<any>) => (behaviorA: ContainerType, behaviorB: ContainerType, ...invalid: ContainerType[]) => React.ComponentType<any> | {
    new (): {
        [x: string]: any;
        getChildren(props: any): any;
    };
    [x: string]: any;
    displayName: string;
    propTypes: any;
    defaultProps: any;
    defaultEvents(props: any): ({
        target: string;
        eventHandlers: any;
    } | null)[];
};
export declare const createContainer: (behaviorA: ContainerType, behaviorB: ContainerType, ...invalid: ContainerType[]) => React.ComponentType<any> | {
    new (): {
        [x: string]: any;
        getChildren(props: any): any;
    };
    [x: string]: any;
    displayName: string;
    propTypes: any;
    defaultProps: any;
    defaultEvents(props: any): ({
        target: string;
        eventHandlers: any;
    } | null)[];
};
export {};
//# sourceMappingURL=create-container.d.ts.map