import _defaults from "lodash/defaults";
/* eslint no-magic-numbers: ["error", { "ignore": [-1, 0, 1, 2] }]*/
import React from "react";
import { Helpers, Path, LineHelpers, UserProps } from "victory-core";
const evaluateProps = props => {
  /**
   * Potential evaluated props are:
   * `ariaLabel`
   * `id`
   * `style`
   * `tabIndex`
   */
  const ariaLabel = Helpers.evaluateProp(props.ariaLabel, props);
  const id = Helpers.evaluateProp(props.id, props);
  const style = Helpers.evaluateStyle(Object.assign({
    fill: "none",
    stroke: "black",
    pointerEvents: "stroke"
  }, props.style), props);
  const tabIndex = Helpers.evaluateProp(props.tabIndex, props);
  return Object.assign({}, props, {
    ariaLabel,
    id,
    style,
    tabIndex
  });
};
const defaultProps = {
  pathComponent: /*#__PURE__*/React.createElement(Path, null),
  role: "presentation",
  shapeRendering: "auto"
};
export const Curve = initialProps => {
  const props = evaluateProps(_defaults({}, initialProps, defaultProps));
  const userProps = UserProps.getSafeUserProps(props);
  const {
    polar,
    origin
  } = props;
  const lineFunction = LineHelpers.getLineFunction(props);
  const defaultTransform = polar && origin ? `translate(${origin.x}, ${origin.y})` : undefined;
  const d = lineFunction(props.data);
  return /*#__PURE__*/React.cloneElement(props.pathComponent, {
    ...props.events,
    ...userProps,
    "aria-label": props.ariaLabel,
    d,
    style: props.style,
    transform: props.transform || defaultTransform,
    className: props.className,
    role: props.role,
    shapeRendering: props.shapeRendering,
    clipPath: props.clipPath,
    tabIndex: props.tabIndex
  });
};